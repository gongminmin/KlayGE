<?xml version="1.0" encoding="utf-8"?>

<effect>
	<include name="util.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="Lighting.fxml"/>
	<include name="Material.fxml"/>
	<include name="Mesh.fxml"/>
	<include name="ModelCamera.fxml"/>

	<parameter type="float2" name="far_plane"/>

	<shader>
		<![CDATA[
void DepthTexWODTVS(float4 pos : POSITION,
	out float oDepth : TEXCOORD0,
	out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);

	oPos = mul(pos, cameras[0].mvp);
	oDepth = oPos.w;
}  

float4 DepthTexWODTPS(float depth : TEXCOORD0) : SV_Target
{
	return WriteAFloat(depth, far_plane.y);
}

void PosTexVS(float4 pos : POSITION,
	out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);

	oPos = mul(pos, cameras[0].mvp);
}

float4 PosTexPS() : SV_Target
{
	return 0;
}
		]]>
	</shader>

	<technique name="DepthTexWODT">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_enable" value="true"/>

			<state name="vertex_shader" value="DepthTexWODTVS()"/>
			<state name="pixel_shader" value="DepthTexWODTPS()"/>
		</pass>
	</technique>

	<technique name="PositionTex">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_enable" value="true"/>
			<state name="color_write_mask" value="0"/>
			
			<state name="vertex_shader" value="PosTexVS()"/>
			<state name="pixel_shader" value="PosTexPS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void PosNormTexVS(float4 pos : POSITION,
	float4 tangent_quat : TANGENT,
	out float3 oNormal : TEXCOORD0,
	out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);

	oPos = mul(pos, cameras[0].mvp);
	oNormal = mul(transform_quat(float3(0, 0, 1), tangent_quat * 2 - 1), (float3x3)model);
}

float4 PosNormTexPS(float3 normal : TEXCOORD0) : SV_Target
{
	return float4(normalize(normal) * 0.5f + 0.5f, 1);
}
		]]>
	</shader>

	<technique name="DepthTexWODTBack">
		<pass name="p0">
			<state name="cull_mode" value="front"/>
			<state name="depth_enable" value="true"/>

			<state name="vertex_shader" value="DepthTexWODTVS()"/>
			<state name="pixel_shader" value="DepthTexWODTPS()"/>
		</pass>
	</technique>

	<technique name="DepthTexWODTFront" inherit="DepthTexWODTBack">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="NormalTexWODTBack">
		<pass name="p0">
			<state name="cull_mode" value="front"/>
			<state name="depth_enable" value="true"/>
			<state name="depth_func" value="equal"/>

			<state name="vertex_shader" value="PosNormTexVS()"/>
			<state name="pixel_shader" value="PosNormTexPS()"/>
		</pass>
	</technique>

	<technique name="NormalTexWODTFront" inherit="NormalTexWODTBack">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>
	
	<technique name="PosNormTexBack">
		<pass name="p0">
			<state name="cull_mode" value="front"/>
			<state name="depth_enable" value="true"/>
			
			<state name="vertex_shader" value="PosNormTexVS()"/>
			<state name="pixel_shader" value="PosNormTexPS()"/>
		</pass>
	</technique>
	
	<technique name="PosNormTexFront" inherit="PosNormTexBack">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<parameter type="float3" name="eye_pos"/>
	<parameter type="float3" name="light_pos"/>
	<parameter type="float3" name="light_color"/>
	<parameter type="float3" name="light_falloff"/>
	<parameter type="float4x4" name="light_vp"/>

	<parameter type="texture3D" name="distance_tex"/>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
		<state name="address_w" value="clamp"/>
	</parameter>

	<parameter type="float" name="esm_scale_factor"/>
	<parameter type="textureCUBE" name="shadow_cube_tex"/>
	<parameter type="texture2D" name="caustics_tex"/>
	<parameter type="sampler" name="linear_clamp_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>
	<parameter type="sampler" name="linear_border_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
	</parameter>
	<parameter type="float4x4" name="obj_model_to_light_model"/>
	<parameter type="float4x4" name="obj_model_to_light_view"/>

	<shader>
		<![CDATA[
float2 CalcLookupUV(float4 lookup_proj)
{
	float2 lookup_uv = lookup_proj.xy / lookup_proj.w * 0.5f;
	lookup_uv.y *= KLAYGE_FLIPPING;
	lookup_uv += 0.5f;
	return lookup_uv;
}

void DistanceMappingVS(float4 pos		: POSITION,
					float2 texcoord0	: TEXCOORD0,
					float4 tangent_quat : TANGENT,	// in object space
					
					out float4 oL		: TEXCOORD0,	// in tangent space
					out float4 oV		: TEXCOORD1,	// in tangent space
					out float3 oH		: TEXCOORD2,	// in tangent space
					out float3 oLightWorldPos : TEXCOORD3,
					out float4 oLightProjPos : TEXCOORD4,
					out float4 oPos		: SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	
	oPos = mul(pos, cameras[0].mvp);

	tangent_quat = tangent_quat * 2 - 1;

	float3x3 matObjToTangentSpace;
	matObjToTangentSpace[0] = transform_quat(float3(1, 0, 0), tangent_quat);
	matObjToTangentSpace[1] = transform_quat(float3(0, 1, 0), tangent_quat) * sign(tangent_quat.w);
	matObjToTangentSpace[2] = transform_quat(float3(0, 0, 1), tangent_quat);

	float3 vLight = light_pos - pos.xyz;
	float3 vView = eye_pos - pos.xyz;
	float3 vHalf = normalize(vLight) + normalize(vView);

	oL.xyz = mul(matObjToTangentSpace, vLight);
	oV.xyz = mul(matObjToTangentSpace, vView);
	oH = mul(matObjToTangentSpace, vHalf);

	oL.w = texcoord0.x;
	oV.w = texcoord0.y;

	oLightWorldPos = mul(pos, obj_model_to_light_model).xyz;
	oLightProjPos = mul(mul(pos, model), light_vp);
}

float4 DistanceMappingShading(float3 L, float3 V, float3 H, float3 diffuse, float3 normal)
{
	float atten = AttenuationTerm(0, -L.xyz, light_falloff);
	float3 light_vec = normalize(L);
	float3 halfway_vec = normalize(H);
	return float4(atten * light_color * CalcBRDFShading(diffuse, 0.2f, 16, light_vec, halfway_vec, normal), 1);
}

float4 DistanceMappingPS(float4 L	: TEXCOORD0,
			float4 V	: TEXCOORD1,
			float3 H	: TEXCOORD2,
			float3 LightWorldPos : TEXCOORD3,
			float4 LightProjPos : TEXCOORD4) : SV_Target
{
	float3 texCoord0 = float3(L.w, V.w, 1);

	float3 view = normalize(V.xyz) * float3(1, 1, 16) * 0.06;

	float3 texUV = texCoord0;
#if KLAYGE_MAX_TEX_DEPTH > 1
	for (int i = 0; i < 8; ++ i)
	{
		texUV -= view * distance_tex.Sample(linear_sampler, texUV).r;
	}
#endif

	if ((texUV.x < 0) || (texUV.y < 0) || (texUV.x > 1) || (texUV.y > 1))
	{
		discard;
	}

	float2 dx = ddx(texCoord0.xy);
	float2 dy = ddy(texCoord0.xy);

	//roughly hack only for this demo, in order to correct shadow for distance mapping
	float3 deltaUV = normalize(float3(texUV.xy, 0.5f)) - normalize(float3(texCoord0.xy, 0.5f));

	float dist = length(LightWorldPos);
	float3 shadow_dir = normalize(LightWorldPos);
	shadow_dir += deltaUV;
	shadow_dir.y *= -KLAYGE_FLIPPING;
	float occluder = ReadAFloat(shadow_cube_tex.SampleLevel(linear_clamp_sampler, shadow_dir, 0), far_plane.x * esm_scale_factor);
	float atten = saturate(exp(occluder - esm_scale_factor * dist));

	float2 lookup_uv = CalcLookupUV(LightProjPos);
	float2 delta = texUV.xy - texCoord0.xy;
	lookup_uv += float2(delta.x, -KLAYGE_FLIPPING * delta.y);
	float4 caustics = float4(caustics_tex.Sample(linear_border_sampler, lookup_uv).xyz, 1);

	float3 diffuse = albedo_tex.SampleGrad(linear_sampler, texUV.xy, dx, dy).rgb;
	float3 bump_normal = decompress_normal(normal_tex.SampleGrad(linear_sampler, texUV.xy, dx, dy));
	return DistanceMappingShading(L.xyz, V.xyz, H.xyz, diffuse, bump_normal) * atten + caustics;
}

float4 DistanceMappingPS_20(float4 L	: TEXCOORD0,
						float4 V		: TEXCOORD1,
						float3 H		: TEXCOORD2,
						float3 LightWorldPos : TEXCOORD3,
						float4 LightProjPos : TEXCOORD4) : SV_Target
{
	float3 texCoord0 = float3(L.w, V.w, 1);

	float3 view = normalize(V.xyz) * float3(1, 1, 16) * 0.06;

	float3 texUV = texCoord0;
#if KLAYGE_MAX_TEX_DEPTH > 1
	for (int i = 0; i < 2; ++ i)
	{
		texUV -= view * distance_tex.Sample(linear_sampler, texUV).r;
	}
#endif
	
	if ((texUV.x < 0) || (texUV.y < 0) || (texUV.x > 1) || (texUV.y > 1))
	{
		discard;
	}
  
	float3 deltaUV = normalize(float3(texUV.xy, 0.5f)) - normalize(float3(texCoord0.xy, 0.5f));

	float dist = length(LightWorldPos);
	float3 shadow_dir = normalize(LightWorldPos);
	shadow_dir += deltaUV;
	shadow_dir.y *= -KLAYGE_FLIPPING;
	float occluder = ReadAFloat(shadow_cube_tex.SampleLevel(linear_clamp_sampler, shadow_dir, 0), far_plane.x * esm_scale_factor);
	float atten = saturate(exp(occluder - esm_scale_factor * dist));

	float2 lookup_uv = CalcLookupUV(LightProjPos);
	float2 delta = texUV.xy - texCoord0.xy;
	lookup_uv += float2(delta.x, -KLAYGE_FLIPPING * delta.y);
	float4 caustics = float4(caustics_tex.Sample(linear_border_sampler, lookup_uv).xyz, 1);

	float3 diffuse = albedo_tex.Sample(linear_sampler, texUV.xy).rgb;
	float3 bump_normal = decompress_normal(normal_tex.Sample(linear_sampler, texUV.xy));
	return DistanceMappingShading(L.xyz, V.xyz, H.xyz, diffuse, bump_normal) * atten + caustics;
}
		]]>
	</shader>

	<technique name="DistanceMapping2a">
		<pass name="p0">
			<state name="vertex_shader" value="DistanceMappingVS()"/>
			<state name="pixel_shader" value="DistanceMappingPS()"/>
		</pass>
	</technique>

	<technique name="DistanceMapping20" inherit="DistanceMapping2a">
		<pass name="p0">
			<state name="pixel_shader" value="DistanceMappingPS_20()"/>
		</pass>
	</technique>

	<parameter type="float2" name="refract_idx"/>
	<parameter type="float3" name="absorption_idx"/>
	<parameter type="float4x4" name="vp"/>
	
	<parameter type="texture2D" name="background_texture"/>
	<parameter type="textureCUBE" name="env_cube"/>
	
	<parameter type="sampler" name="trilinear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void RefractEffectVS(float4 position : POSITION, float4 tangent_quat : TANGENT,
		out float3 wPosition : TEXCOORD0,
		out float3 wNormal : TEXCOORD1,
		out float3 wViewVec : TEXCOORD2,
		out float4 hPos : SV_Position)
{
	position = float4(position.xyz * pos_extent + pos_center, 1);
	
	hPos = mul(float4(position.xyz, 1), cameras[0].mvp);
	wPosition = mul(float4(position.xyz, 1), model).xyz;
	wNormal = mul(transform_quat(float3(0, 0, 1), tangent_quat * 2 - 1), (float3x3)model);
	wViewVec = normalize(wPosition - eye_pos);
}

float4 RefractEffectPS(float3 wPosition : TEXCOORD0, float3 wNormal : TEXCOORD1, float3 wViewVec : TEXCOORD2) : SV_Target
{
	wViewVec = normalize(wViewVec);
	wNormal = normalize(wNormal);

	float3 refract_vec = refract(wViewVec, wNormal, refract_idx.y);
	float3 reflect_vec = reflect(wViewVec, wNormal);
	float fresnel_term = FresnelTerm(-wViewVec, wNormal, 0.0977f).x;

	float3 reflected_clr = env_cube.Sample(trilinear_sampler, float3(reflect_vec.x, -KLAYGE_FLIPPING * reflect_vec.y, reflect_vec.z)).xyz;

	float dist = 10.0f;
	float3 intersection_pt = wPosition + dist * refract_vec;

	float4 lookup_proj = mul(float4(intersection_pt, 1), vp);
	float3 refracted_clr = background_texture.Sample(trilinear_sampler, CalcLookupUV(lookup_proj)).xyz;

	return float4(lerp(refracted_clr, reflected_clr, fresnel_term), 1);
}
		]]>
	</shader>
	
	<technique name="RefractEffect" >
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_enable" value="true"/>
			
			<state name="vertex_shader" value="RefractEffectVS()"/>
			<state name="pixel_shader" value="RefractEffectPS()"/>
		</pass>
	</technique>
</effect>

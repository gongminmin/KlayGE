<?xml version='1.0'?>

<effect>
	<include name="Noise.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="InfTerrain.fxml"/>

	<parameter type="int3" name="fractal_octaves"/>
	
	<parameter type="float2" name="inv_width_height"/>
	<parameter type="texture2D" name="gradient_tex"/>
	<parameter type="texture2D" name="noise_tex">
		<annotation type="string" name="SasResourceAddress" value="white_noise_tex.dds"/>
	</parameter>

	<parameter type="sampler" name="point_clamp_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
float HybridTerrain(float2 x, int3 octaves)
{
	x /= 4.5f;

	float2 x_offset = float2(fBm(0.2f * x, octaves.z), fBm(0.2f * (x + 1), octaves.z));
	float2 x_twisted = x + 0.01f * x_offset;

	float h = ridge(0.3f + 0.5f * fBm(x_twisted, octaves.x), 1);
	
	float uv_scale  = pow(2.0f, octaves.x);
	float amp_scale = pow(0.5f, octaves.x);
	float f = fBm(x * uv_scale, octaves.y) * amp_scale;
	
	if (octaves.x > 0)
	{
		return h + f * saturate(h);
	}
	else
	{
		return f;
	}
}

float4 HeightPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	texcoord.y = 1 - texcoord.y;
	float2 uv = texcoord * world_uv_repeats.x + float2(texture_world_offset.x, -texture_world_offset.z);
	return HybridTerrain(uv, fractal_octaves) - 0.5f;
}

float4 GradientPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float x0 = height_tex.Sample(point_clamp_sampler, texcoord + float2(+inv_width_height.x, 0)).x;
	float x1 = height_tex.Sample(point_clamp_sampler, texcoord + float2(-inv_width_height.x, 0)).x;
	float y0 = height_tex.Sample(point_clamp_sampler, texcoord + float2(0, +inv_width_height.y)).x;
	float y1 = height_tex.Sample(point_clamp_sampler, texcoord + float2(0, -inv_width_height.y)).x;
	return float4(x1 - x0, y1 - y0, 0, 0);
}

float4 ProceduralMask(float2 texcoord, float height, float3 normal)
{
	float random = noise_tex.Sample(linear_wrap_sampler, texcoord * 31 / 256).x * 0.5f + 0.5f;
		
	float weight0 = saturate(random / 0.7f);
	float weight1 = smoothstep(0.2f, 0.8f, normal.y * normal.y * random * 12);
	float weight2 = smoothstep(0.2f, 1.2f, (height * 2 - 0.5f) * random);

	float weight_layer_0 = (1 - weight0) * (1 - weight2);
	float weight_layer_2 = weight0 * (1 - weight2);
	float weight_layer_3 = (1 - weight1) * weight2;
	float weight_layer_1 = weight1 * weight2;
	
	return float4(weight_layer_0, weight_layer_1, weight_layer_2, weight_layer_3);
}

float4 MaskPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float height = vertical_scale.x * height_tex.Sample(linear_clamp_sampler, texcoord).x;

	float ARBITRARY_FUDGE = 2;
	float2 grad = gradient_tex.Sample(linear_clamp_sampler, texcoord).xy;
	float scale = ARBITRARY_FUDGE * vertical_scale.y;
	float3 normal = normalize(float3(scale * grad.x, coarse_sample_spacing, scale * grad.y));

	float2 tex_uv = HeightUVToWorldXZ(texcoord) + 2 * texture_world_offset.xz;
	
	return ProceduralMask(tex_uv, height, normal);
}
		]]>
	</shader>

	<technique name="HeightTech">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="HeightPS()"/>
		</pass>
	</technique>
	<technique name="GradientTech">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="GradientPS()"/>
		</pass>
	</technique>
	<technique name="MaskTech">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="MaskPS()"/>
		</pass>
	</technique>


	<parameter type="float4x4" name="model_mat"/>
	<parameter type="float2" name="eye_pos_xz"/>

	<shader>
		<![CDATA[
void CalcProceduralTerrainNormalColor(float3 world_pos, float4x4 model_view, float debug_patch,
		out float3 normal, out float3 color)
{
	normal = CalcTerrainNormal(world_pos);

	float2 tex_uv = world_pos.xz + 2 * texture_world_offset.xz;
	float4 mask = ProceduralMask(tex_uv, world_pos.y, normal);
	//float4 mask = coarse_mask_map.Sample(linear_wrap_sampler, WorldXZToHeightUV(world_pos.xz));

	float2 dist = mul(float4(world_pos, 1), model_mat).xz - eye_pos_xz;
	float factor = saturate(dot(dist, dist) / 100000);
	mask.w += (1 - factor) * mask.z;
	mask.z *= factor;

	color = CalcTerrainColor(world_pos, debug_patch, mask);

	normal = normalize(mul(normal, (float3x3)model_view));
}

void GBufferProceduralTerrainPS(float3 world_pos : TEXCOORD0, float debug_patch : TEXCOORD1,
				uint rt_index : SV_RenderTargetArrayIndex,
				out float4 rt0 : SV_Target0, out float4 rt1 : SV_Target1, out float4 rt2 : SV_Target2)
{
	KlayGECameraInfo camera = cameras[rt_index];
	float4x4 model_view = camera.model_view;

	float3 normal, color;
	CalcProceduralTerrainNormalColor(world_pos, model_view, debug_patch, normal, color);

	StoreGBuffer(normal, color, 0, 0, 1,
		rt0, rt1, rt2);
}
		]]>
	</shader>

	<technique name="GBufferTessTerrainFillTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferTessTerrainVS()"/>
			<state name="hull_shader" value="GBufferTessTerrainHS()"/>
			<state name="domain_shader" value="GBufferTessTerrainDS()"/>
			<state name="pixel_shader" value="GBufferProceduralTerrainPS()"/>
		</pass>
	</technique>
	<technique name="GBufferTessTerrainFillNoVpRtTech" inherit="GBufferTessTerrainFillTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferTerrainNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="GBufferTessTerrainLineTech" inherit="GBufferTessTerrainFillTech">
		<pass name="p0">
			<state name="polygon_mode" value="line"/>
		</pass>
	</technique>
	<technique name="GBufferTessTerrainLineNoVpRtTech" inherit="GBufferTessTerrainLineTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferTerrainNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="GBufferNoTessTerrainFillTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferNoTessTerrainVS()"/>
			<state name="pixel_shader" value="GBufferProceduralTerrainPS()"/>
		</pass>
	</technique>
	<technique name="GBufferNoTessTerrainFillNoVpRtTech" inherit="GBufferNoTessTerrainFillTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferTerrainNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="GBufferNoTessTerrainLineTech" inherit="GBufferNoTessTerrainFillTech">
		<pass name="p0">
			<state name="polygon_mode" value="line"/>
		</pass>
	</technique>
	<technique name="GBufferNoTessTerrainLineNoVpRtTech" inherit="GBufferNoTessTerrainLineTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferTerrainNoVpRtGS()"/>
		</pass>
	</technique>

	<technique name="GenNoTessTerrainReflectiveShadowMapTech" inherit="GBufferNoTessTerrainFillTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>
	<technique name="GenNoTessTerrainReflectiveShadowMapNoVpRtTech" inherit="GenNoTessTerrainReflectiveShadowMapTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferTerrainNoVpRtGS()"/>
		</pass>
	</technique>
</effect>

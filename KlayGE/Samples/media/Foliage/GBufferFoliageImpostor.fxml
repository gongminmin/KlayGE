<?xml version='1.0'?>

<effect>
	<include name="GBuffer.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="billboard_mat"/>
	</cbuffer>

	<shader>
		<![CDATA[
void FoliageImpostorGBufferVS(uint instance_id : SV_InstanceID,
			float2 pos2 : POSITION,
			float4 instance_pos_scale : TEXCOORD1,
			float2 instance_rotation : TEXCOORD2,
			out float4 oTexCoord_2xy : TEXCOORD0,
			out float4 oTsToView0_2z : TEXCOORD1,
			out float4 oTsToView1_Depth : TEXCOORD2,
			out SS_TEXCOORD_TYPE oScreenTc : TEXCOORD3,
			out float4 oCurrPosSS : TEXCOORD4,
			out float4 oPrevPosSS : TEXCOORD5,
			out float4 oPos : SV_Position)
{
	float4 pos = float4(pos2 * pos_extent.xy + pos_center.xy, 0, 1);
	float2 texcoord = float2(pos2.x, -pos2.y) * tc_extent + instance_rotation;

	pos.xyz *= instance_pos_scale.w;
	pos.xyz = mul(pos.xyz, (float3x3)billboard_mat);
	pos.xyz += instance_pos_scale.xyz;

#if MULTI_VIEW_MODE
	uint camera_index = CameraIndex(instance_id);
#else
	uint camera_index = 0;
#endif
	KlayGECameraInfo camera = cameras[camera_index];
	float4x4 mvp = camera.mvp;
	float4x4 model_view = camera.model_view;

	oPos = mul(pos, mvp);
	oTexCoord_2xy.xy = texcoord;

	float3x3 obj_to_ts;
	obj_to_ts[0] = mul(float3(1, 0, 0), (float3x3)billboard_mat);
	obj_to_ts[1] = mul(float3(0, 1, 0), (float3x3)billboard_mat);
	obj_to_ts[2] = mul(float3(0, 0, 1), (float3x3)billboard_mat);
	float3x3 ts_to_view = mul(obj_to_ts, (float3x3)model_view);
	oTsToView0_2z.xyz = ts_to_view[0];
	oTsToView1_Depth.xyz = ts_to_view[1];
	oTexCoord_2xy.zw = ts_to_view[2].xy;
	oTsToView0_2z.w = ts_to_view[2].z;

	oTsToView1_Depth.w = oPos.w;

	oScreenTc = EncodeSSTexcoord(oPos);

	oCurrPosSS = oPos;
	oPrevPosSS = mul(pos, prev_mvps[camera_index]);
}

void FoliageImpostorGBufferAlphaTestPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
					out float4 rt0 : SV_Target0, out float4 rt1 : SV_Target1)
{
	rt0 = normal_tex.Sample(bilinear_sampler, texcoord_2xy.xy);
	rt1 = albedo_tex.Sample(bilinear_sampler, texcoord_2xy.xy);
	clip(dot(rt1, rt1) - 1.0f / 255);
}
		]]>
	</shader>

	<technique name="FoliageImpostorGBufferAlphaTest" inherit="GBufferAlphaTestTech" override="GBufferAlphaTestTech">
		<pass name="p0">
			<state name="vertex_shader" value="FoliageImpostorGBufferVS()"/>
			<state name="pixel_shader" value="FoliageImpostorGBufferAlphaTestPS()"/>
		</pass>
	</technique>
</effect>

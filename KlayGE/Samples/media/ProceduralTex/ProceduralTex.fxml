<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="Noise.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="Mesh.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp" semantic="WORLDVIEWPROJECTION"/>
		<parameter type="float3" name="eye_pos"/>
		<parameter type="float3" name="light_pos"/>
		<parameter type="float3" name="light_color"/>
		<parameter type="float3" name="light_falloff"/>
		<parameter type="float" name="t"/>
	</cbuffer>

	<parameter type="float" name="freq"/>

	<shader>
		<![CDATA[
float4 wood(float3 tex_coord)
{
	float3 color1 = float3(0.66f, 0.33f, 0.13f);
	float3 color2 = float3(0.93f, 0.60f, 0.13f);

	float g = simplex_noise(tex_coord * 0.72f) * 16;
	float s = frac(g);

	return float4(lerp(color1, color2, s), 1);
}

float4 marble(float3 tex_coord)
{
	float3 color1 = float3(0.03f, 0.03f, 0.2f);
	float3 color2 = float3(0.5f, 0.5f, 0.7f);

	return float4(lerp(color1, color2, cos(tex_coord.x * 0.1f + 6 * fBm(tex_coord, 5, 2, 0.5f))), 1);
}

float4 cloud(float3 tex_coord)
{
	float3 color1 = float3(0.2f, 0.4f, 0.9f);
	float3 color2 = float3(0.9f, 0.8f, 0.8f);

	return float4(lerp(color1, color2, cos(tex_coord.z * 2.5f + 2 * turbulence(tex_coord * 5, 6, 2, 0.5f)) * 0.9f), 1);
}

float4 electro(float3 tex_coord)
{
	float3 color = float3(1.70f, 1.48f, 1.78f);

	float turb = fBm(float4(tex_coord * 2.5f, t * 0.6f), 6);
	float3 grow = (1 - pow(abs(turb), 0.2)) * color;
	return float4(pow(grow, 4), 1);
}

void ProceduralTexVS(float4 pos			: POSITION,
					float4 tangent_quat	: TANGENT,
					out float3 oPosOS	: TEXCOORD0,
					out float3 oNormalOS : TEXCOORD1,
					out float3 oTexCoord : TEXCOORD2,
					out float4 oPos		: SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	tangent_quat = tangent_quat * 2 - 1;
	
	oPos = mul(pos, mvp);
	oPosOS = pos.xyz;
	oNormalOS = transform_quat(float3(0, 0, 1), tangent_quat);
	oTexCoord = pos.xyz * freq * 0.6f;
}

float4 WoodPS(float3 pos_os : TEXCOORD0,
					float3 normal_os : TEXCOORD1,
					float3 tex_coord : TEXCOORD2) : SV_Target
{
	float3 light_os = normalize(light_pos - pos_os);
	float3 view_os = normalize(eye_pos - pos_os);
	float3 halfway_os = normalize(light_os + view_os);

	float3 bump = simplex_noise_gradient(tex_coord * 100, 0.1f);
	float3 normal = normalize(normal_os + bump * 0.05f);

	float atten = AttenuationTerm(light_pos, pos_os, light_falloff);
	
	float3 clr = wood(tex_coord).xyz;

	return float4(clr * 0.05f + atten * light_color * CalcBRDFShading(clr, 0.1f, 32, light_os, halfway_os, normal), 1);
}

float4 MarblePS(float3 pos_os : TEXCOORD0,
					float3 normal_os : TEXCOORD1,
					float3 tex_coord : TEXCOORD2) : SV_Target
{
	float3 light_os = normalize(light_pos - pos_os);
	float3 view_os = normalize(eye_pos - pos_os);
	float3 halfway_os = normalize(light_os + view_os);
	
	normal_os = normalize(normal_os);

	float atten = AttenuationTerm(light_pos, pos_os, light_falloff);

	float3 clr = max(0.0f, marble(tex_coord).xyz);

	return float4(clr * 0.05f + atten * light_color * CalcBRDFShading(clr, 0.4f, 16, light_os, halfway_os, normal_os), 1);
}

float4 CloudPS(float3 pos_os : TEXCOORD0,
					float3 normal_os : TEXCOORD1,
					float3 tex_coord : TEXCOORD2) : SV_Target
{
	float3 light_os = normalize(light_pos - pos_os);
	float3 view_os = normalize(eye_pos - pos_os);
	float3 halfway_os = normalize(light_os + view_os);
	
	normal_os = normalize(normal_os);
	
	return cloud(tex_coord) * max(0.0f, dot(normal_os, light_os));
}

float4 ElectroPS(float3 pos_os : TEXCOORD0,
					float3 normal_os : TEXCOORD1,
					float3 tex_coord : TEXCOORD2) : SV_Target
{
	float3 light_os = normalize(light_pos - pos_os);
	float3 view_os = normalize(eye_pos - pos_os);
	float3 halfway_os = normalize(light_os + view_os);
	
	normal_os = normalize(normal_os);
	
	return electro(tex_coord) * max(0.0f, dot(normal_os, light_os));
}
		]]>
	</shader>

	<technique name="ProceduralWoodTex">
		<pass name="p0">
			<state name="vertex_shader" value="ProceduralTexVS()"/>
			<state name="pixel_shader" value="WoodPS()"/>
		</pass>
	</technique>
	<technique name="ProceduralMarbleTex">
		<pass name="p0">
			<state name="vertex_shader" value="ProceduralTexVS()"/>
			<state name="pixel_shader" value="MarblePS()"/>
		</pass>
	</technique>
	<technique name="ProceduralCloudTex">
		<pass name="p0">
			<state name="vertex_shader" value="ProceduralTexVS()"/>
			<state name="pixel_shader" value="CloudPS()"/>
		</pass>
	</technique>
	<technique name="ProceduralElectroTex">
		<pass name="p0">
			<state name="vertex_shader" value="ProceduralTexVS()"/>
			<state name="pixel_shader" value="ElectroPS()"/>
		</pass>
	</technique>
</effect>

<?xml version='1.0'?>

<effect>
	<include name="util.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="Mesh.fxml"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="trilinear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
		<state name="address_w" value="wrap"/>
	</parameter>

	<parameter type="float3" name="LightDir" x="0" y="10" z="3"/>

	<parameter type="texture2D" name="grass_tex"/>

	<parameter type="texture2D" name="height_map_tex"/>
	<parameter type="texture2D" name="normal_map_tex"/>
	<parameter type="sampler" name="normal_map_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp"/>
		<parameter type="float" name="inv_far"/>
	</cbuffer>

	<shader>
		<![CDATA[
void TerrainVS(float4 pos			: POSITION,
					float2 tex			: TEXCOORD0,
					out float4 oTex  : TEXCOORD0,
					out float oDepth : TEXCOORD1,
					out float4 oPos		: SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);

	oTex.xy = float2(tex.x, 1 - tex.y);
	oTex.zw = oTex.xy * 8;

	pos = pos.xzyw;
	pos.y += height_map_tex.SampleLevel(point_sampler, oTex.xy, 0).r;

	oPos = mul(pos, mvp);
	oDepth = oPos.w;
}

float4 TerrainPS(float4 tex : TEXCOORD0, float depth : TEXCOORD1) : SV_Target
{
	float3 normal = normalize(decompress_normal(normal_map_tex.Sample(normal_map_sampler, tex.xy)).xzy * float3(4, 1, 4));
	return float4(grass_tex.Sample(trilinear_sampler, tex.zw).rgb * dot(normalize(LightDir), normal),
		depth * inv_far);
}
		]]>
	</shader>

	<technique name="Terrain">
		<pass name="p0">
			<state name="vertex_shader" value="TerrainVS()"/>
			<state name="pixel_shader" value="TerrainPS()"/>
		</pass>
	</technique>


	<parameter type="texture2D" name="src_tex"/>
	<parameter type="texture2D" name="tex_with_alpha"/>

	<shader>
		<![CDATA[
float4 BlendPS(float2 tex : TEXCOORD0) : SV_Target
{
	float4 fog = tex_with_alpha.Sample(point_sampler, tex);
	float clr = max(0, dot(LightDir, fog.xyz) / sqrt(dot(LightDir, LightDir) * dot(fog.xyz, fog.xyz)));
	fog.rgb = clr;
	fog.a = saturate(fog.a);
	float4 s = src_tex.Sample(point_sampler, tex);
	return float4(lerp(s.rgb, fog.rgb, fog.a), 1);
}
		]]>
	</shader>

	<technique name="Blend">
		<pass name="p0">
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="BlendPS()"/>
		</pass>
	</technique>
</effect>

<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="Noise.fxml"/>
	<include name="GBuffer.fxml"/>
	<include name="SkyBox.fxml"/>
	<include name="InfTerrain.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="SSR.fxml"/>

	<macro name="BLEND_FACTOR" value="0.6"/>
	
	<parameter type="float3" name="waterbody_color" x="0.07" y="0.15" z="0.2"/>
	<parameter type="float" name="patch_length"/>
	<parameter type="float3" name="fog_color"/>

	<parameter type="texture2D" name="displacement_tex_0"/>
	<parameter type="texture2D" name="displacement_tex_1"/>
	<parameter type="texture2DArray" name="displacement_tex_array"/>
	<parameter type="texture2D" name="gradient_tex_0"/>
	<parameter type="texture2D" name="gradient_tex_1"/>
	<parameter type="texture2DArray" name="gradient_tex_array"/>
	<parameter type="texture2D" name="reflection_tex"/>

	<cbuffer name="per_frame">
		<parameter type="int2" name="frames"/>
		<parameter type="float3" name="min_disp0"/>
		<parameter type="float3" name="min_disp1"/>
		<parameter type="float3" name="disp_range0"/>
		<parameter type="float3" name="disp_range1"/>
		<parameter type="float" name="interpolate_frac"/>
		<parameter type="float4x4" name="view"/>
	</cbuffer>

	<parameter type="texture2D" name="opaque_shading_tex"/>

	<parameter type="sampler" name="point_clamp_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="reflection_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void OceanGBufferVS(uint instance_id : SV_InstanceID,
			float2 pos : POSITION,
			out float3 oTexCoordDepth : TEXCOORD0,
			out float2 noise_grad : TEXCOORD1,
			out SS_TEXCOORD_TYPE oScreenTc : TEXCOORD2,
#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
			out uint oRtIndex : SV_RenderTargetArrayIndex,
			out float4 oPos : SV_Position
#else
			out float oRtIndex : TEXCOORD3,
			out float4 oPos : POSITION
#endif
			)
{
	float4 pos_os = GetInfTerrainPosOS(pos, 10);
	float2 tex_coord = pos_os.xz / (patch_length * 3.2f);

#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	float3 disp0 = displacement_tex_array.SampleLevel(linear_wrap_sampler, float3(tex_coord, frames.x), 0).xyz;
	float3 disp1 = displacement_tex_array.SampleLevel(linear_wrap_sampler, float3(tex_coord, frames.y), 0).xyz;
#else
	float3 disp0 = displacement_tex_0.SampleLevel(linear_wrap_sampler, tex_coord, 0).xyz;
	float3 disp1 = displacement_tex_1.SampleLevel(linear_wrap_sampler, tex_coord, 0).xyz;
#endif

	float3 disp = lerp(min_disp0 + disp0 * disp_range0, min_disp1 + disp1 * disp_range1, interpolate_frac);

	float lacunarity = 1.93485736f;
	float gain = 1.0f / 1.93485736f;

	uint camera_index = CameraIndex(instance_id);
	KlayGECameraInfo camera = cameras[camera_index];
	float4x4 mvp = camera.mvp;
	float3 eye_pos = camera.eye_pos;

	float3 eye_dir = eye_pos - pos_os.xyz;
	float fog_scale = saturate(length(eye_dir.xz) / 1200.0f);
	float height_scale = 1 - fog_scale;

	pos_os.xz += disp.xy;
	
	float noise_height = fBm(tex_coord, 3, lacunarity, gain);

	float d = 1.0f / 64;
	float fx = fBm(tex_coord + float2(d, 0), 3, lacunarity, gain);
	float fy = fBm(tex_coord + float2(0, d), 3, lacunarity, gain);
	noise_grad = (float2(fx, fy) - noise_height) * stretch;

	pos_os.y = base_level + lerp(noise_height * stretch, disp.z, BLEND_FACTOR) * height_scale;
	
	float3 normal;
	float4 tangent;
	normal.xz = (float2(fx, fy) - pos_os.y) * stretch;
	normal = normalize(float3(normal.x, 1, normal.z));
	tangent.xyz = normalize(float3(1, (fx - pos_os.y) * stretch, 0));
	tangent.w = 1;

	oPos = mul(pos_os, mvp);

	oTexCoordDepth.xy = tex_coord;
	oTexCoordDepth.z = oPos.w;

	oScreenTc = EncodeSSTexcoord(oPos);

#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
	oRtIndex = camera_index;
#else
	oRtIndex = camera_index + 0.5f;
#endif
}

void OceanGBufferAlphaBlendPS(float3 texcoord_depth : TEXCOORD0, float2 noise_grad : TEXCOORD1,
					SS_TEXCOORD_TYPE ss_tc : TEXCOORD2, uint rt_index : SV_RenderTargetArrayIndex,
					out float4 rt0 : SV_Target0, out float4 rt1 : SV_Target1, out float4 rt2 : SV_Target2)
{
	float2 screen_tc = DecodeSSTexcoord(ss_tc);

	clip(opaque_depth_tex.Sample(point_sampler, screen_tc).x - texcoord_depth.z);

#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	float2 gradient0 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy, frames.x)).xy;
	float2 gradient1 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy * 6.4f, frames.x)).xy;
	float2 gradient2 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy, frames.y)).xy;
	float2 gradient3 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy * 6.4f, frames.y)).xy;
#else
	float2 gradient0 = gradient_tex_0.Sample(linear_wrap_sampler, texcoord_depth.xy).xy;
	float2 gradient1 = gradient_tex_0.Sample(linear_wrap_sampler, texcoord_depth.xy * 6.4f).xy;
	float2 gradient2 = gradient_tex_1.Sample(linear_wrap_sampler, texcoord_depth.xy).xy;
	float2 gradient3 = gradient_tex_1.Sample(linear_wrap_sampler, texcoord_depth.xy * 6.4f).xy;
#endif

	float2 gradient = lerp(lerp(gradient0, gradient1, 0.3f), lerp(gradient2, gradient3, 0.3f), interpolate_frac) * 2 - 1;
	gradient = lerp(noise_grad, gradient, BLEND_FACTOR);

	KlayGECameraInfo camera = cameras[rt_index];
	float4x4 model_view = camera.model_view;

	float3 normal = normalize(mul(float3(gradient.x, 1, gradient.y), (float3x3)model_view));

	StoreGBuffer(normal, waterbody_color, float2(0, metalness_glossiness_factor.y), 0, 1,
		rt0, rt1, rt2);
}

void OceanReflectionAlphaBlendVS(uint instance_id : SV_InstanceID,
					float2 pos : POSITION,
					out float3 eye_dir : TEXCOORD0,
					out SS_TEXCOORD_TYPE oTc : TEXCOORD1,
#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
					out uint oRtIndex : SV_RenderTargetArrayIndex,
					out float4 oPos : SV_Position
#else
					out float oRtIndex : TEXCOORD2,
					out float4 oPos : POSITION
#endif
					)
{
	float4 pos_os = GetInfTerrainPosOS(pos, 10);
	float2 tex_coord = pos_os.xz / (patch_length * 3.2f);

	uint camera_index = CameraIndex(instance_id);
	KlayGECameraInfo camera = cameras[camera_index];
	float4x4 mvp = camera.mvp;
	float4x4 model_view = camera.model_view;
	float3 eye_pos = camera.eye_pos;

	eye_dir = eye_pos - pos_os.xyz;
	float fog_scale = saturate(length(eye_dir.xz) / 1200.0f);
	float height_scale = 1 - fog_scale;

	eye_dir = mul(eye_dir, (float3x3)model_view);

	pos_os.y = base_level;

	oPos = mul(pos_os, mvp);

	oTc = EncodeSSTexcoord(oPos);

#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
	oRtIndex = camera_index;
#else
	oRtIndex = camera_index + 0.5f;
#endif
}

float4 OceanReflectionAlphaBlendPS(float3 eye_dir : TEXCOORD0, SS_TEXCOORD_TYPE ss_tc : TEXCOORD1) : SV_Target
{
	float2 tc = DecodeSSTexcoord(ss_tc);

	float3 normal = view[1].xyz;

	eye_dir = normalize(eye_dir);

	float3 reflect_vec = normalize(reflect(-eye_dir, normal));
	reflect_vec = mul(reflect_vec, (float3x3)inv_view);
	float3 sky_reflection = decode_hdr_yc(skybox_tex.Sample(skybox_sampler, reflect_vec).r,
		skybox_C_tex.Sample(skybox_sampler, reflect_vec)).rgb;		
	float fog = saturate(normalize(reflect_vec).y * 4.2 - 0.2);
	fog *= fog * (3 - 2 * fog);
	sky_reflection = lerp(fog_color, sky_reflection, fog);

	float4 reflection4 = CalcSSR(tc, normal, -eye_dir, -eye_dir, proj, near_q_far, 1, 500.0f);
	float3 reflection = lerp(sky_reflection, reflection4.xyz, reflection4.w);
	return float4(reflection, 1);
}

void OceanSpecialShadingAlphaBlendVS(uint instance_id : SV_InstanceID,
					float2 pos : POSITION,
					out float3 eye_dir : TEXCOORD0,
					out float4 tex_coord_noise_grad : TEXCOORD1,
					out float4 pos_ss : TEXCOORD2,
					out SS_TEXCOORD_TYPE oTc : TEXCOORD3,
#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
					out uint oRtIndex : SV_RenderTargetArrayIndex,
					out float4 oPos : SV_Position
#else
					out float oRtIndex : TEXCOORD4,
					out float4 oPos : POSITION
#endif
					)
{
	float4 pos_os = GetInfTerrainPosOS(pos, 10);
	float2 tex_coord = pos_os.xz / (patch_length * 3.2f);

#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	float3 disp0 = displacement_tex_array.SampleLevel(linear_wrap_sampler, float3(tex_coord, frames.x), 0).xyz;
	float3 disp1 = displacement_tex_array.SampleLevel(linear_wrap_sampler, float3(tex_coord, frames.y), 0).xyz;
#else
	float3 disp0 = displacement_tex_0.SampleLevel(linear_wrap_sampler, tex_coord, 0).xyz;
	float3 disp1 = displacement_tex_1.SampleLevel(linear_wrap_sampler, tex_coord, 0).xyz;
#endif

	float3 disp = lerp(min_disp0 + disp0 * disp_range0, min_disp1 + disp1 * disp_range1, interpolate_frac);

	float lacunarity = 1.93485736f;
	float gain = 1.0f / 1.93485736f;

	uint camera_index = CameraIndex(instance_id);
	KlayGECameraInfo camera = cameras[camera_index];
	float4x4 mvp = camera.mvp;
	float4x4 model_view = camera.model_view;
	float3 eye_pos = camera.eye_pos;

	eye_dir = eye_pos - pos_os.xyz;
	float fog_scale = saturate(length(eye_dir.xz) / 1200.0f);
	float height_scale = 1 - fog_scale;

	eye_dir = mul(eye_dir, (float3x3)model_view);

	pos_os.xz += disp.xy;

	float noise_height = fBm(tex_coord, 3, lacunarity, gain);

	float d = 1.0f / 64;
	float fx = fBm(tex_coord + float2(d, 0), 3, lacunarity, gain);
	float fy = fBm(tex_coord + float2(0, d), 3, lacunarity, gain);
	float2 noise_grad = (float2(fx, fy) - noise_height) * stretch;

	pos_os.y = base_level + lerp(noise_height * stretch, disp.z, BLEND_FACTOR) * height_scale;

	oPos = mul(pos_os, mvp);

	tex_coord_noise_grad = float4(tex_coord, noise_grad);
	pos_ss = oPos;

	oTc = EncodeSSTexcoord(oPos);

#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
	oRtIndex = camera_index;
#else
	oRtIndex = camera_index + 0.5f;
#endif
}

float4 OceanSpecialShadingAlphaBlendPS(float3 eye_dir : TEXCOORD0, float4 tex_coord_noise_grad : TEXCOORD1, float4 pos_ss : TEXCOORD2,
	SS_TEXCOORD_TYPE ss_tc : TEXCOORD3) : SV_Target
{
	float2 tc = DecodeSSTexcoord(ss_tc);

	float4 ndc = g_buffer_rt0_tex.Sample(point_sampler, tc);
	float3 normal = GetNormal(ndc);

	float3 normal_ws = mul(normal, (float3x3)inv_view);

	eye_dir = normalize(eye_dir);

	float2 bump = normal_ws.xz / (pos_ss.z / pos_ss.w);
	float3 reflection = reflection_tex.Sample(reflection_sampler, float2(tc.x, 1 - tc.y) + bump * 0.2f).xyz;

	float no_water_depth = opaque_depth_tex.Sample(point_clamp_sampler, tc).x;

	float3 refraction;
	float offseted_depth = opaque_depth_tex.Sample(point_clamp_sampler, tc + bump * 0.2f).x;
	if (offseted_depth < pos_ss.w)
	{
		refraction = opaque_shading_tex.Sample(linear_clamp_sampler, tc).rgb;
	}
	else
	{
		refraction.r = opaque_shading_tex.Sample(linear_clamp_sampler, tc + bump * 0.10f).r;
		refraction.g = opaque_shading_tex.Sample(linear_clamp_sampler, tc + bump * 0.15f).g;
		refraction.b = opaque_shading_tex.Sample(linear_clamp_sampler, tc + bump * 0.20f).b;
	}

	float water_depth = clamp(no_water_depth - pos_ss.w, 0, 100.0f);

	float fresnel = FresnelTerm(eye_dir, normal, 0.027f).x;

	float3 water_color = lerp(refraction * exp(-water_depth * 0.05f) * saturate(10 / pos_ss.w), reflection, fresnel);

	return float4(water_color, saturate(water_depth * 0.1f));
}
		]]>
	</shader>

	<shader version="4">
		<![CDATA[
struct OceanGBufferPS_In
{
	float3 texcoord_depth : TEXCOORD0;
	float2 noise_grad : TEXCOORD1;
	SS_TEXCOORD_TYPE ss_tc : TEXCOORD2;
	uint rt_index : SV_RenderTargetArrayIndex;
	float4 position : SV_Position;
};

[maxvertexcount(3)]
void OceanGBufferNoVpRtGS(triangle float3 in_texcoord_depth[3] : TEXCOORD0, triangle float2 in_noise_grad[3] : TEXCOORD1,
	triangle SS_TEXCOORD_TYPE in_ss_tc[3] : TEXCOORD2, triangle float in_rt_index[3] : TEXCOORD3, triangle float4 in_position[3] : POSITION,
	inout TriangleStream<OceanGBufferPS_In> out_stream)
{
	OceanGBufferPS_In output;
	output.rt_index = (uint)in_rt_index[0];

	[unroll]
	for (int v = 0; v < 3; ++ v)
	{
		output.texcoord_depth = in_texcoord_depth[v];
		output.noise_grad = in_noise_grad[v];
		output.ss_tc = in_ss_tc[v];
		output.position = in_position[v];
		out_stream.Append(output);
	}
}

struct OceanReflectionAlphaBlendPS_In
{
	float3 eye_dir : TEXCOORD0;
	SS_TEXCOORD_TYPE ss_tc : TEXCOORD1;
	uint rt_index : SV_RenderTargetArrayIndex;
	float4 position : SV_Position;
};

[maxvertexcount(3)]
void OceanReflectionAlphaBlendNoVpRtGS(triangle float3 in_eye_dir[3] : TEXCOORD0, triangle SS_TEXCOORD_TYPE in_ss_tc[3] : TEXCOORD2,
	triangle float in_rt_index[3] : TEXCOORD3, triangle float4 in_position[3] : POSITION,
	inout TriangleStream<OceanReflectionAlphaBlendPS_In> out_stream)
{
	OceanReflectionAlphaBlendPS_In output;
	output.rt_index = (uint)in_rt_index[0];

	[unroll]
	for (int v = 0; v < 3; ++ v)
	{
		output.eye_dir = in_eye_dir[v];
		output.ss_tc = in_ss_tc[v];
		output.position = in_position[v];
		out_stream.Append(output);
	}
}

struct OceanSpecialShadingAlphaBlendPS_In
{
	float3 eye_dir : TEXCOORD0;
	float4 tex_coord_noise_grad : TEXCOORD1;
	float4 pos_ss : TEXCOORD2;
	SS_TEXCOORD_TYPE ss_tc : TEXCOORD3;
	uint rt_index : SV_RenderTargetArrayIndex;
	float4 position : SV_Position;
};

[maxvertexcount(3)]
void OceanSpecialShadingAlphaBlendNoVpRtGS(triangle float3 in_eye_dir[3] : TEXCOORD0,
	triangle float4 in_tex_coord_noise_grad[3] : TEXCOORD1, triangle float4 in_pos_ss[3] : TEXCOORD2,
	triangle SS_TEXCOORD_TYPE in_ss_tc[3] : TEXCOORD3, triangle float in_rt_index[3] : TEXCOORD4, triangle float4 in_position[3] : POSITION,
	inout TriangleStream<OceanSpecialShadingAlphaBlendPS_In> out_stream)
{
	OceanSpecialShadingAlphaBlendPS_In output;
	output.rt_index = (uint)in_rt_index[0];

	[unroll]
	for (int v = 0; v < 3; ++ v)
	{
		output.eye_dir = in_eye_dir[v];
		output.tex_coord_noise_grad = in_tex_coord_noise_grad[v];
		output.pos_ss = in_pos_ss[v];
		output.ss_tc = in_ss_tc[v];
		output.position = in_position[v];
		out_stream.Append(output);
	}
}
		]]>
	</shader>

	<technique name="OceanGBufferAlphaBlendFront" inherit="GBufferAlphaBlendFrontTech">
		<pass name="p0">
			<state name="vertex_shader" value="OceanGBufferVS()"/>
			<state name="pixel_shader" value="OceanGBufferAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="OceanGBufferAlphaBlendFrontNoVpRt" inherit="OceanGBufferAlphaBlendFront">
		<pass name="p0">
			<state name="geometry_shader" value="OceanGBufferNoVpRtGS()"/>
		</pass>
	</technique>

	<technique name="OceanReflectionAlphaBlendFront">
		<pass name="p0">
			<state name="vertex_shader" value="OceanReflectionAlphaBlendVS()"/>
			<state name="pixel_shader" value="OceanReflectionAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="OceanReflectionAlphaBlendFrontNoVpRt" inherit="OceanReflectionAlphaBlendFront">
		<pass name="p0">
			<state name="geometry_shader" value="OceanReflectionAlphaBlendNoVpRtGS()"/>
		</pass>
	</technique>

	<technique name="OceanSpecialShadingAlphaBlendFront" inherit="SpecialShadingAlphaBlendFrontTech">
		<pass name="p0">
			<state name="vertex_shader" value="OceanSpecialShadingAlphaBlendVS()"/>
			<state name="pixel_shader" value="OceanSpecialShadingAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="OceanSpecialShadingAlphaBlendFrontNoVpRt" inherit="OceanSpecialShadingAlphaBlendFront">
		<pass name="p0">
			<state name="geometry_shader" value="OceanSpecialShadingAlphaBlendNoVpRtGS()"/>
		</pass>
	</technique>

	<parameter type="float2" name="scale_bias" x="4.2" y="-0.2"/>

	<shader>
		<![CDATA[
float4 SpecialShadingFoggySkyBoxPS(float3 texCoord0 : TEXCOORD0) : SV_Target
{
	float fog = saturate(normalize(texCoord0).y * scale_bias.x + scale_bias.y);
	fog *= fog * (3 - 2 * fog);

	float3 sky = decode_hdr_yc(skybox_tex.Sample(skybox_sampler, texCoord0).r,
			skybox_C_tex.Sample(skybox_sampler, texCoord0)).rgb;

	return float4(lerp(fog_color, sky, fog), 1);
}
		]]>
	</shader>

	<technique name="SpecialShadingFoggySkyBox" inherit="SkyBoxTech">
		<pass name="p0">
			<state name="pixel_shader" value="SpecialShadingFoggySkyBoxPS()"/>
		</pass>
	</technique>
</effect>

<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="Noise.fxml"/>
	<include name="GBufferNoSkinning.fxml"/>
	<include name="SkyBox.fxml"/>
	<include name="InfTerrain.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="SSR.fxml"/>

	<macro name="BLEND_FACTOR" value="0.6"/>
	
	<parameter type="float3" name="waterbody_color" x="0.07" y="0.15" z="0.2"/>
	<parameter type="float3" name="waterbody_specular_color" x="10" y="10" z="10"/>	
	<parameter type="float" name="patch_length"/>
	<parameter type="float3" name="fog_color"/>

	<parameter type="texture2D" name="displacement_tex_0"/>
	<parameter type="texture2D" name="displacement_tex_1"/>
	<parameter type="texture2DArray" name="displacement_tex_array"/>
	<parameter type="texture2D" name="gradient_tex_0"/>
	<parameter type="texture2D" name="gradient_tex_1"/>
	<parameter type="texture2DArray" name="gradient_tex_array"/>
	<parameter type="texture2D" name="reflection_tex"/>

	<cbuffer name="per_frame">		
		<parameter type="int2" name="frames"/>
		<parameter type="float3" name="min_disp0"/>
		<parameter type="float3" name="min_disp1"/>
		<parameter type="float3" name="disp_range0"/>
		<parameter type="float3" name="disp_range1"/>
		<parameter type="float" name="interpolate_frac"/>
		<parameter type="float4x4" name="view"/>
		<parameter type="float4x4" name="inv_view"/>
	</cbuffer>

	<parameter type="texture2D" name="g_buffer_tex"/>
	<parameter type="texture2D" name="opaque_shading_tex"/>

	<parameter type="sampler" name="point_clamp_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="reflection_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void OceanGBufferVS(float2 pos : POSITION,
			out float3 oTexCoordDepth : TEXCOORD0,
			out float2 noise_grad : TEXCOORD1,
#ifdef NOPERSPECTIVE_SUPPORT
			out noperspective float2 oScreenTc : TEXCOORD2,
#else
			out float3 oScreenTc : TEXCOORD2,
#endif
			out float4 oPos : SV_Position)
{
	float4 pos_os = GetInfTerrainPosOS(pos, 10);
	float2 tex_coord = pos_os.xz / (patch_length * 3.2f);

#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	float3 disp0 = displacement_tex_array.SampleLevel(linear_wrap_sampler, float3(tex_coord, frames.x), 0).xyz;
	float3 disp1 = displacement_tex_array.SampleLevel(linear_wrap_sampler, float3(tex_coord, frames.y), 0).xyz;
#else
	float3 disp0 = displacement_tex_0.SampleLevel(linear_wrap_sampler, tex_coord, 0).xyz;
	float3 disp1 = displacement_tex_1.SampleLevel(linear_wrap_sampler, tex_coord, 0).xyz;
#endif

	float3 disp = lerp(min_disp0 + disp0 * disp_range0, min_disp1 + disp1 * disp_range1, interpolate_frac);

	float lacunarity = 1.93485736f;
	float gain = 1.0f / 1.93485736f;
	
	float3 eye_dir = eye_pos - pos_os.xyz;
	float fog_scale = saturate(length(eye_dir.xz) / 1200.0f);
	float height_scale = 1 - fog_scale;

	pos_os.xz += disp.xy;
	
	float noise_height = fBm(tex_coord, 3, lacunarity, gain);

	float d = 1.0f / 64;
	float fx = fBm(tex_coord + float2(d, 0), 3, lacunarity, gain);
	float fy = fBm(tex_coord + float2(0, d), 3, lacunarity, gain);
	noise_grad = (float2(fx, fy) - noise_height) * stretch;

	pos_os.y = base_level + lerp(noise_height * stretch, disp.z, BLEND_FACTOR) * height_scale;
	
	float3 normal;
	float4 tangent;
	normal.xz = (float2(fx, fy) - pos_os.y) * stretch;
	normal = normalize(float3(normal.x, 1, normal.z));
	tangent.xyz = normalize(float3(1, (fx - pos_os.y) * stretch, 0));
	tangent.w = 1;

	oPos = mul(pos_os, mvp);

	oTexCoordDepth.xy = tex_coord;
	oTexCoordDepth.z = oPos.w;

	oScreenTc.xy = oPos.xy / oPos.w * 0.5f;
	oScreenTc.y *= KLAYGE_FLIPPING;
	oScreenTc.xy += 0.5f;

#ifndef NOPERSPECTIVE_SUPPORT
	oScreenTc.z = oPos.w;
	oScreenTc.xy *= oScreenTc.z;
#endif
}

float4 OceanDepthAlphaBlendPS(float3 texcoord_depth : TEXCOORD0) : SV_Target
{
	return texcoord_depth.z;
}

float4 OceanGBufferAlphaBlendRT0PS(float3 texcoord_depth : TEXCOORD0, float2 noise_grad : TEXCOORD1,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD2
#else
					float3 screen_tc_w : TEXCOORD2
#endif
					) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	clip(ReadAFloat(opaque_depth_tex.Sample(point_sampler, screen_tc), near_q_far.z) - texcoord_depth.z);

#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	float2 gradient0 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy, frames.x)).xy;
	float2 gradient1 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy * 6.4f, frames.x)).xy;
	float2 gradient2 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy, frames.y)).xy;
	float2 gradient3 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy * 6.4f, frames.y)).xy;
#else
	float2 gradient0 = gradient_tex_0.Sample(linear_wrap_sampler, texcoord_depth.xy).xy;
	float2 gradient1 = gradient_tex_0.Sample(linear_wrap_sampler, texcoord_depth.xy * 6.4f).xy;
	float2 gradient2 = gradient_tex_1.Sample(linear_wrap_sampler, texcoord_depth.xy).xy;
	float2 gradient3 = gradient_tex_1.Sample(linear_wrap_sampler, texcoord_depth.xy * 6.4f).xy;
#endif

	float2 gradient = lerp(lerp(gradient0, gradient1, 0.3f), lerp(gradient2, gradient3, 0.3f), interpolate_frac) * 2 - 1;
	gradient = lerp(noise_grad, gradient, BLEND_FACTOR);
	
	float3 normal = normalize(mul(float3(gradient.x, 1, gradient.y), (float3x3)model_view));

	return StoreGBufferRT0(normal, shininess_clr.x);
}

float4 OceanGBufferAlphaBlendRT1PS(float3 texcoord_depth : TEXCOORD0, float2 noise_grad : TEXCOORD1,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD2
#else
					float3 screen_tc_w : TEXCOORD2
#endif
					) : SV_Target
{
	float3 diffuse = waterbody_color;
	float specular = waterbody_specular_color.x;
	
	return StoreGBufferRT1(diffuse, specular);
}

void OceanGBufferAlphaBlendMRTPS(float3 texcoord_depth : TEXCOORD0, float2 noise_grad : TEXCOORD1,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD2,
#else
					float3 screen_tc_w : TEXCOORD2,
#endif
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	clip(ReadAFloat(opaque_depth_tex.Sample(point_sampler, screen_tc), near_q_far.z) - texcoord_depth.z);

#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	float2 gradient0 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy, frames.x)).xy;
	float2 gradient1 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy * 6.4f, frames.x)).xy;
	float2 gradient2 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy, frames.y)).xy;
	float2 gradient3 = gradient_tex_array.Sample(linear_wrap_sampler, float3(texcoord_depth.xy * 6.4f, frames.y)).xy;
#else
	float2 gradient0 = gradient_tex_0.Sample(linear_wrap_sampler, texcoord_depth.xy).xy;
	float2 gradient1 = gradient_tex_0.Sample(linear_wrap_sampler, texcoord_depth.xy * 6.4f).xy;
	float2 gradient2 = gradient_tex_1.Sample(linear_wrap_sampler, texcoord_depth.xy).xy;
	float2 gradient3 = gradient_tex_1.Sample(linear_wrap_sampler, texcoord_depth.xy * 6.4f).xy;
#endif

	float2 gradient = lerp(lerp(gradient0, gradient1, 0.3f), lerp(gradient2, gradient3, 0.3f), interpolate_frac) * 2 - 1;
	gradient = lerp(noise_grad, gradient, BLEND_FACTOR);
	
	float3 normal = normalize(mul(float3(gradient.x, 1, gradient.y), (float3x3)model_view));

	float3 diffuse = waterbody_color;
	float specular = waterbody_specular_color.x;
	
	StoreGBufferMRT(normal, specular, shininess_clr.x, diffuse,
		mrt_0, mrt_1);
}

void OceanReflectionAlphaBlendVS(float2 pos : POSITION,
					out float3 eye_dir : TEXCOORD0,
#ifdef NOPERSPECTIVE_SUPPORT
					out noperspective float2 oTc : TEXCOORD1,
#else
					out float3 oTc : TEXCOORD1,
#endif
					out float4 oPos : SV_Position)
{
	float4 pos_os = GetInfTerrainPosOS(pos, 10);
	float2 tex_coord = pos_os.xz / (patch_length * 3.2f);

	eye_dir = eye_pos - pos_os.xyz;
	float fog_scale = saturate(length(eye_dir.xz) / 1200.0f);
	float height_scale = 1 - fog_scale;
	
	eye_dir = mul(eye_dir, (float3x3)model_view);

	pos_os.y = base_level;

	oPos = mul(pos_os, mvp);

	oTc.xy = oPos.xy / oPos.w;
	oTc.y *= KLAYGE_FLIPPING;
	oTc.xy = oTc.xy * 0.5f + 0.5f;

#ifndef NOPERSPECTIVE_SUPPORT
	oTc.z = oPos.w;
	oTc.xy *= oTc.z;
#endif
}

float4 OceanReflectionAlphaBlendPS(float3 eye_dir : TEXCOORD0,
#ifdef NOPERSPECTIVE_SUPPORT
	noperspective float2 tc : TEXCOORD1
#else
	float3 tc_w : TEXCOORD1
#endif
	) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 tc = tc_w.xy / tc_w.z;
#endif

	float3 normal = view[1].xyz;

	eye_dir = normalize(eye_dir);

	float4 reflection4 = CalcSSR(tc, normal, -eye_dir, -eye_dir, 1, 0);
	float3 reflection = reflection4.xyz * reflection4.w;
	return float4(reflection, 1);
}

void OceanSpecialShadingAlphaBlendVS(float2 pos : POSITION,
					out float3 eye_dir : TEXCOORD0,
					out float4 tex_coord_noise_grad : TEXCOORD1,
					out float4 pos_ss : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					out noperspective float2 oTc : TEXCOORD3,
#else
					out float3 oTc : TEXCOORD3,
#endif
					out float4 oPos : SV_Position)
{
	float4 pos_os = GetInfTerrainPosOS(pos, 10);
	float2 tex_coord = pos_os.xz / (patch_length * 3.2f);

#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	float3 disp0 = displacement_tex_array.SampleLevel(linear_wrap_sampler, float3(tex_coord, frames.x), 0).xyz;
	float3 disp1 = displacement_tex_array.SampleLevel(linear_wrap_sampler, float3(tex_coord, frames.y), 0).xyz;
#else
	float3 disp0 = displacement_tex_0.SampleLevel(linear_wrap_sampler, tex_coord, 0).xyz;
	float3 disp1 = displacement_tex_1.SampleLevel(linear_wrap_sampler, tex_coord, 0).xyz;
#endif

	float3 disp = lerp(min_disp0 + disp0 * disp_range0, min_disp1 + disp1 * disp_range1, interpolate_frac);

	float lacunarity = 1.93485736f;
	float gain = 1.0f / 1.93485736f;

	eye_dir = eye_pos - pos_os.xyz;
	float fog_scale = saturate(length(eye_dir.xz) / 1200.0f);
	float height_scale = 1 - fog_scale;
	
	eye_dir = mul(eye_dir, (float3x3)model_view);

	pos_os.xz += disp.xy;
	
	float noise_height = fBm(tex_coord, 3, lacunarity, gain);

	float d = 1.0f / 64;
	float fx = fBm(tex_coord + float2(d, 0), 3, lacunarity, gain);
	float fy = fBm(tex_coord + float2(0, d), 3, lacunarity, gain);
	float2 noise_grad = (float2(fx, fy) - noise_height) * stretch;

	pos_os.y = base_level + lerp(noise_height * stretch, disp.z, BLEND_FACTOR) * height_scale;
	
	oPos = mul(pos_os, mvp);
	
	tex_coord_noise_grad = float4(tex_coord, noise_grad);
	pos_ss = oPos;
	
	oTc.xy = oPos.xy / oPos.w;
	oTc.y *= KLAYGE_FLIPPING;
	oTc.xy = oTc.xy * 0.5f + 0.5f;

#ifndef NOPERSPECTIVE_SUPPORT
	oTc.z = oPos.w;
	oTc.xy *= oTc.z;
#endif
}

float4 OceanSpecialShadingAlphaBlendPS(float3 eye_dir : TEXCOORD0, float4 tex_coord_noise_grad : TEXCOORD1, float4 pos_ss : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
	noperspective float2 tc : TEXCOORD3
#else
	float3 tc_w : TEXCOORD3
#endif
	) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 tc = tc_w.xy / tc_w.z;
#endif

	float4 ndc = g_buffer_tex.Sample(point_sampler, tc);
	float3 normal = GetNormal(ndc);

	float3 normal_ws = mul(normal, (float3x3)inv_view);

	eye_dir = normalize(eye_dir);

	float2 bump = normal_ws.xz / (pos_ss.z / pos_ss.w);
	float3 reflection = reflection_tex.Sample(reflection_sampler, tc + bump * 0.2f).xyz;

	float no_water_depth = ReadAFloat(opaque_depth_tex.Sample(point_clamp_sampler, tc), near_q_far.z);

	float3 refraction;
	float offseted_depth = ReadAFloat(opaque_depth_tex.Sample(point_clamp_sampler, tc + bump * 0.2f), near_q_far.z);
	if (offseted_depth < pos_ss.w)
	{
		refraction = opaque_shading_tex.Sample(linear_clamp_sampler, tc).rgb;
	}
	else
	{
		refraction.r = opaque_shading_tex.Sample(linear_clamp_sampler, tc + bump * 0.10f).r;
		refraction.g = opaque_shading_tex.Sample(linear_clamp_sampler, tc + bump * 0.15f).g;
		refraction.b = opaque_shading_tex.Sample(linear_clamp_sampler, tc + bump * 0.20f).b;
	}

	float water_depth = clamp(no_water_depth - pos_ss.w, 0, 100.0f);

	float fresnel = fresnel_term_schlick(eye_dir, normal, 0.027f).x;

	float3 water_color = lerp(refraction * exp(-water_depth * 0.05f) * saturate(10 / pos_ss.w), reflection, fresnel);

	return float4(water_color, saturate(water_depth * 0.1f));
}
		]]>
	</shader>

	<technique name="OceanDepthAlphaBlendFront" inherit="DepthAlphaBlendFrontTech">
		<pass name="p0">
			<state name="vertex_shader" value="OceanGBufferVS()"/>
			<state name="pixel_shader" value="OceanDepthAlphaBlendPS()"/>
		</pass>
	</technique>

	<technique name="OceanGBufferAlphaBlendFrontRT0" inherit="GBufferAlphaBlendFrontRT0Tech">
		<pass name="p0">
			<state name="vertex_shader" value="OceanGBufferVS()"/>
			<state name="pixel_shader" value="OceanGBufferAlphaBlendRT0PS()"/>
		</pass>
	</technique>

	<technique name="OceanGBufferAlphaBlendFrontRT1" inherit="GBufferAlphaBlendFrontRT1Tech">
		<pass name="p0">
			<state name="vertex_shader" value="OceanGBufferVS()"/>
			<state name="pixel_shader" value="OceanGBufferAlphaBlendRT1PS()"/>
		</pass>
	</technique>

	<technique name="OceanGBufferAlphaBlendFrontMRT" inherit="GBufferAlphaBlendFrontMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="OceanGBufferVS()"/>
			<state name="pixel_shader" value="OceanGBufferAlphaBlendMRTPS()"/>
		</pass>
	</technique>

	<technique name="OceanReflectionAlphaBlendFront">
		<pass name="p0">
			<state name="vertex_shader" value="OceanReflectionAlphaBlendVS()"/>
			<state name="pixel_shader" value="OceanReflectionAlphaBlendPS()"/>
		</pass>
	</technique>

	<technique name="OceanSpecialShadingAlphaBlendFront" inherit="SpecialShadingAlphaBlendFrontTech">
		<pass name="p0">
			<state name="vertex_shader" value="OceanSpecialShadingAlphaBlendVS()"/>
			<state name="pixel_shader" value="OceanSpecialShadingAlphaBlendPS()"/>
		</pass>
	</technique>

	<parameter type="float2" name="scale_bias" x="4.2" y="-0.2"/>

	<shader>
		<![CDATA[
void FoggySkyBoxVS(float4 pos : POSITION,
			out float3 texcoord0 : TEXCOORD0,
			out float4 oPos : SV_Position)
{
	oPos = pos;
	texcoord0 = mul(pos, inv_mvp).xyz;
}

float4 GBufferFoggySkyBoxRT0PS() : SV_Target
{
	return 0;
}

float4 GBufferFoggySkyBoxRT1PS() : SV_Target
{
	return 0;
}

void GBufferFoggySkyBoxMRTPS(out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	mrt_0 = mrt_1 = 0;
}

float4 SpecialShadingFoggySkyBoxPS(float3 texCoord0 : TEXCOORD0) : SV_Target
{
	float fog = saturate(normalize(texCoord0).y * scale_bias.x + scale_bias.y);
	fog *= fog * (3 - 2 * fog);

	float3 sky = decode_hdr_yc(skybox_tex.Sample(skybox_sampler, texCoord0).r,
			skybox_C_tex.Sample(skybox_sampler, texCoord0)).rgb;

	return float4(lerp(fog_color, sky, fog), 1);
}
		]]>
	</shader>

	<technique name="GBufferFoggySkyBoxRT0" inherit="GBufferSkyBoxRT0Tech">
		<pass name="p0">
			<state name="vertex_shader" value="FoggySkyBoxVS()"/>
			<state name="pixel_shader" value="GBufferFoggySkyBoxRT0PS()"/>
		</pass>
	</technique>

	<technique name="GBufferFoggySkyBoxRT1" inherit="GBufferSkyBoxRT1Tech">
		<pass name="p0">
			<state name="vertex_shader" value="FoggySkyBoxVS()"/>
			<state name="pixel_shader" value="GBufferFoggySkyBoxRT1PS()"/>
		</pass>
	</technique>

	<technique name="GBufferFoggySkyBoxMRT" inherit="GBufferSkyBoxMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="FoggySkyBoxVS()"/>
			<state name="pixel_shader" value="GBufferFoggySkyBoxMRTPS()"/>
		</pass>
	</technique>

	<technique name="SpecialShadingFoggySkyBox" inherit="SkyBoxTech">
		<pass name="p0">
			<state name="vertex_shader" value="FoggySkyBoxVS()"/>
			<state name="pixel_shader" value="SpecialShadingFoggySkyBoxPS()"/>
		</pass>
	</technique>
</effect>

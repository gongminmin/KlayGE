<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="util.fxml"/>
	<include name="Material.fxml"/>
	<include name="Mesh.fxml"/>
	<include name="ModelCamera.fxml"/>

	<parameter type="float4x4" name="obj_model_to_light_model"/>
	<parameter type="float2" name="far_plane"/>

	<parameter type="float3" name="light_color"/>
	<parameter type="float3" name="light_falloff"/>

	<parameter type="float" name="esm_scale_factor"/>

	<shader>
		<![CDATA[
float CalcDist(float4 position)
{
	float4 LightWorldPos = mul(position, obj_model_to_light_model);
	LightWorldPos /= LightWorldPos.w;
	return length(LightWorldPos.xyz);
}

void GenCubeShadowMapVS(float4 Position : POSITION,
						float4 tangent_quat   : TANGENT,
						out float oDist : TEXCOORD0,
						out float4 oPos : SV_Position)
{
	Position = float4(Position.xyz * pos_extent + pos_center, 1);
	
	oPos = mul(Position, cameras[0].mvp);
	oDist = CalcDist(Position);
}

float4 GenCubeShadowMapPS(float dist : TEXCOORD0) : SV_Target
{
	return WriteAFloat(dist, far_plane.y);
}
		]]>
	</shader>

	<technique name="GenCubeShadowMap">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="GenCubeShadowMapVS()"/>
			<state name="pixel_shader" value="GenCubeShadowMapPS()"/>
		</pass>
	</technique>

	<shader version="4">
		<![CDATA[
bool FrustumCulling(float4 pos0, float4 pos1, float4 pos2)
{
	float4 t0 = saturate(pos0.xyxy * float4(-1, -1, 1, 1) - pos0.w);
	float4 t1 = saturate(pos1.xyxy * float4(-1, -1, 1, 1) - pos1.w);
	float4 t2 = saturate(pos2.xyxy * float4(-1, -1, 1, 1) - pos2.w);
	float4 t = t0 * t1 * t2;
	return !any(t);
}

struct PS_IN
{
	float dist : TEXCOORD0;
	float4 pos : SV_Position;
	uint rt_index : SV_RenderTargetArrayIndex;
};

void GenCubeOneShadowMapVS(float4 Position : POSITION,
						float4 tangent_quat : TANGENT,
						out float4 oPos : POSITION,
						out float oDist : TEXCOORD0)
{
	Position = float4(Position.xyz * pos_extent + pos_center, 1);
	
	oPos = Position;
	oDist = CalcDist(Position);
}

[maxvertexcount(18)]
void GenCubeOneShadowMapGS(triangle float4 in_pos[3] : POSITION, triangle float in_dist[3] : TEXCOORD0, inout TriangleStream<PS_IN> out_stream)
{
	PS_IN output;
	for (uint f = 0; f < 6; ++f)
	{
		[branch]
		if (f < num_cameras)
		{
			output.rt_index = RenderTargetIndex(f);

			float4x4 mvp = cameras[f].mvp;
			float4 pos[3] =
			{
				mul(in_pos[0], mvp), mul(in_pos[1], mvp), mul(in_pos[2], mvp)
			};
		
			[branch]
			if (FrustumCulling(pos[0], pos[1], pos[2]))
			{
				[unroll]
				for (int v = 0; v < 3; ++ v)
				{
					output.pos = pos[v];
					output.dist = in_dist[v];
					out_stream.Append(output);
				}
			}
			out_stream.RestartStrip();
		}
		else
		{
			break;
		}
	}
}
		]]>
	</shader>

	<technique name="GenCubeOneShadowMap">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="GenCubeOneShadowMapVS()"/>
			<state name="geometry_shader" value="GenCubeOneShadowMapGS()"/>
			<state name="pixel_shader" value="GenCubeShadowMapPS()"/>
		</pass>
	</technique>

	<shader version="4">
		<![CDATA[
void GenCubeOneInstanceShadowMapVS(float4 Position : POSITION,
						float4 tangent_quat : TANGENT,
						uint instance_id : SV_InstanceID,
						out float4 oPos : POSITION,
						out float2 oDist : TEXCOORD0)
{
	Position = float4(Position.xyz * pos_extent + pos_center, 1);

	uint camera_index = CameraIndex(instance_id);
	oPos = mul(Position, cameras[camera_index].mvp);

	oDist.x = CalcDist(Position);
	oDist.y = asfloat(RenderTargetIndex(camera_index));
}

[maxvertexcount(3)]
void GenCubeOneInstanceShadowMapGS(triangle float4 in_pos[3] : POSITION, triangle float2 in_dist[3] : TEXCOORD0, inout TriangleStream<PS_IN> out_stream)
{
	PS_IN output;
	output.rt_index = asuint(in_dist[0].y);

	[branch]
	if (FrustumCulling(in_pos[0], in_pos[1], in_pos[2]))
	{
		[unroll]
		for (int v = 0; v < 3; ++ v)
		{
			output.pos = in_pos[v];
			output.dist = in_dist[v].x;
			out_stream.Append(output);
		}
	}
}
		]]>
	</shader>

	<technique name="GenCubeOneInstanceShadowMap">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="GenCubeOneInstanceShadowMapVS()"/>
			<state name="geometry_shader" value="GenCubeOneInstanceShadowMapGS()"/>
			<state name="pixel_shader" value="GenCubeShadowMapPS()"/>
		</pass>
	</technique>

	<shader version="4">
		<![CDATA[
#ifdef KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
void GenCubeOneInstanceVpRtShadowMapVS(float4 Position : POSITION,
						float4 tangent_quat : TANGENT,
						uint instance_id : SV_InstanceID,
						out float oDist : TEXCOORD0,
						out float4 oPos : SV_Position,
						out uint oRtIndex : SV_RenderTargetArrayIndex)
{
	Position = float4(Position.xyz * pos_extent + pos_center, 1);

	uint camera_index = CameraIndex(instance_id);
	oPos = mul(Position, cameras[camera_index].mvp);

	oDist = CalcDist(Position);
	oRtIndex = RenderTargetIndex(camera_index);
}
#endif
		]]>
	</shader>

	<technique name="GenCubeOneInstanceVpRtShadowMap">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="GenCubeOneInstanceVpRtShadowMapVS()"/>
			<state name="pixel_shader" value="GenCubeShadowMapPS()"/>
		</pass>
	</technique>

	<shader version="5">
		<![CDATA[
[maxvertexcount(3)]
[instance(6)]
void GenCubeOneInstanceGSShadowMapGS(triangle float4 in_pos[3] : POSITION, triangle float in_dist[3] : TEXCOORD0,
						uint instance_id : SV_GSInstanceID,
						inout TriangleStream<PS_IN> out_stream)
{
	[branch]
	if (instance_id < num_cameras)
	{
		PS_IN output;
		output.rt_index = RenderTargetIndex(instance_id);

		float4x4 mvp = cameras[instance_id].mvp;
		float4 pos[3] =
		{
			mul(in_pos[0], mvp), mul(in_pos[1], mvp), mul(in_pos[2], mvp)
		};

		[branch]
		if (FrustumCulling(pos[0], pos[1], pos[2]))
		{
			[unroll]
			for (int v = 0; v < 3; ++ v)
			{
				output.pos = pos[v];
				output.dist = in_dist[v];
				out_stream.Append(output);
			}
		}
	}
}
		]]>
	</shader>

	<technique name="GenCubeOneInstanceGSShadowMap">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="GenCubeOneShadowMapVS()"/>
			<state name="geometry_shader" value="GenCubeOneInstanceGSShadowMapGS()"/>
			<state name="pixel_shader" value="GenCubeShadowMapPS()"/>
		</pass>
	</technique>
	
	
	<parameter type="float3" name="light_pos"/>

	<parameter type="textureCUBE" name="light_projective_tex"/>
	<parameter type="textureCUBE" name="shadow_cube_tex"/>

	<parameter type="sampler" name="linear_wrap_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler" name="linear_clamp_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void RenderSceneVS(float4 Position : POSITION,
					float4 tangent_quat : TANGENT,
					float2 Texcoord : TEXCOORD0,
					out float2 oTexcoord : TEXCOORD0,
					out float3 oLightWorldPos : TEXCOORD1,
					out float3 oLightWorldNormal : TEXCOORD2,
					out float4 oPos : SV_Position)
{
	Position = float4(Position.xyz * pos_extent + pos_center, 1);
	Texcoord = Texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;
	
	oTexcoord = Texcoord;
	oPos = mul(Position, cameras[0].mvp);
	oLightWorldPos = mul(Position, obj_model_to_light_model).xyz;
	oLightWorldNormal = mul(transform_quat(float3(0, 0, 1), tangent_quat), (float3x3)obj_model_to_light_model);
}

float4 RenderScenePS(float2 Texcoord : TEXCOORD0, float3 LightWorldPos : TEXCOORD1, float3 LightWorldNormal : TEXCOORD2) : SV_Target 
{
	float3 albedo = albedo_clr.rgb;
	if (albedo_map_enabled)
	{
		albedo *= albedo_tex.Sample(linear_wrap_sampler, Texcoord).rgb;
	}
	
	float metalness = metalness_glossiness_factor.x;
	float glossiness = metalness_glossiness_factor.y;
	if (metalness_glossiness_factor.z > 0.5f)
	{
		float2 mg_tex = get_xy_channel(metalness_glossiness_tex.Sample(linear_wrap_sampler, Texcoord));
		metalness *= mg_tex.x;
		glossiness *= mg_tex.y;
	}
	
	float3 c_diff = DiffuseColor(albedo, metalness);
	float3 c_spec = SpecularColor(albedo, metalness);
	float shininess = Glossiness2Shininess(glossiness);
	
	float3 emissive = emissive_clr.rgb;
	if (emissive_clr.a > 0.5f)
	{
		emissive *= emissive_tex.Sample(linear_wrap_sampler, Texcoord).rgb;
	}
	
	float3 light_vec = normalize(-LightWorldPos);
	float3 normal = normalize(LightWorldNormal);
	float3 halfway = normalize(light_vec + normal);
	float3 shading = CalcBRDFShading(c_diff, c_spec, shininess, light_vec, halfway, normal);

	float3 ori_color = light_projective_tex.Sample(linear_clamp_sampler, LightWorldPos).rgb * light_color;
	float dist = length(LightWorldPos);

	float3 shadow_dir = float3(LightWorldPos.x, -KLAYGE_FLIPPING * LightWorldPos.y, LightWorldPos.z);
	float occluder = ReadAFloat(shadow_cube_tex.Sample(linear_clamp_sampler, shadow_dir), far_plane.x * esm_scale_factor);
	
	float atten = AttenuationTerm(0, LightWorldPos, light_falloff);
	// Exponential shadow mapping
	atten *= saturate(exp(occluder - esm_scale_factor * dist));

	float3 clr = albedo * 0.2f + emissive + shading * ori_color * atten;
	return float4(clr, 1.0f);
}
		]]>
	</shader>

	<technique name="RenderScene">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="RenderSceneVS()"/>
			<state name="pixel_shader" value="RenderScenePS()"/>
		</pass>
	</technique>
</effect>

<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="util.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="Mesh.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="model"/>
		<parameter type="float4x4" name="mvp"/>
		<parameter type="float3" name="eye_pos"/>
		<parameter type="int2" name="diff_spec_mip"/>
		<parameter type="float3" name="albedo"/>
		<parameter type="float" name="metalness"/>
		<parameter type="float" name="glossiness"/>
	</cbuffer>

	<parameter type="textureCUBE" name="skybox_Ycube_tex"/>
	<parameter type="textureCUBE" name="skybox_Ccube_tex"/>
	<parameter type="sampler" name="skybox_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
float3 PrefilteredDiffuseIBL(float3 c_diff, float3 normal)
{
	float3 prefiltered_clr = decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, normal, diff_spec_mip.x).r,
		skybox_Ccube_tex.SampleLevel(skybox_sampler, normal, diff_spec_mip.x)).xyz;
	return CalcEnvDiffuse(prefiltered_clr, c_diff);
}

float3 PBFittingPrefilteredSpecularIBL(float3 c_spec, float glossiness, float3 normal, float3 view)
{
	float mip = CalcPrefilteredEnvMip(glossiness, diff_spec_mip.y);
	float3 r = CalcPrefilteredEnvVec(normal, view);
	float3 prefiltered_clr = decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, r, mip).r,
		skybox_Ccube_tex.SampleLevel(skybox_sampler, r, mip)).xyz;
	return CalcEnvSpecular(prefiltered_clr, c_spec, glossiness, normal, view);
}

void PBFittingPrefilteredVS(float4 pos		: POSITION,
				float4 tangent_quat	: TANGENT,
				out float3 oNormal	: TEXCOORD0,
				out float3 oIncident : TEXCOORD1,
				out float4 oPos		: SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	tangent_quat = tangent_quat * 2 - 1;

	oPos = mul(pos, mvp);
	oNormal = mul(transform_quat(float3(0, 0, 1), tangent_quat), (float3x3)model);
	oIncident = eye_pos - mul(pos, model).xyz;
}

float4 PBFittingPrefilteredPS(float3 normal : TEXCOORD0, float3 incident : TEXCOORD1) : SV_Target
{
	normal = normalize(normal);
	incident = normalize(incident);
	
	float3 diffuse_clr = albedo * (1 - metalness);
	float3 specular_clr = lerp(0.04f, albedo, metalness);

	return float4(PrefilteredDiffuseIBL(diffuse_clr, normal)
		+ PBFittingPrefilteredSpecularIBL(specular_clr, glossiness, normal, incident), 1);
}
		]]>
	</shader>

	<technique name="PBFittingPrefiltered">
		<pass name="p0">
			<state name="vertex_shader" value="PBFittingPrefilteredVS()"/>
			<state name="pixel_shader" value="PBFittingPrefilteredPS()"/>
		</pass>
	</technique>
</effect>

<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="Mesh.fxml"/>

	<parameter type="float4x4" name="modelview" semantic="WORLDVIEW"/>
	<parameter type="float4x4" name="proj"/>
	<parameter type="float4x4" name="mvp"/>
	<parameter type="float" name="currentAngle"/>
	<parameter type="float3" name="lightDir"/>

	<parameter type="float" name="half_length"/>
	<parameter type="float" name="half_width"/>

	<parameter type="texture2D" name="flag_tex"/>
	<parameter type="sampler" name="flagSampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void VertexDisplacementVS(float4 pos			: POSITION,
								float2 texcoord0	: TEXCOORD0,
								out float2 oTexcoord0	: TEXCOORD0,
								out float3 oNormal		: TEXCOORD1,
								out float4 oPos			: SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);

	float4 v = pos;
	float2 offset = pos.xy + float2(half_length, -half_width);
	v.z = (cos(offset.x + currentAngle) + sin(offset.y + currentAngle)) * offset.x * 0.2f;

	float3 x_dir = float3(0.5f, 0, -sin(pos.x + currentAngle) * 0.2f);
	float3 y_dir = float3(0, 0.5f, cos(pos.y + currentAngle) * pos.x * 0.2f);
	float3 normal = mul(cross(x_dir, y_dir), (float3x3)modelview);

	oPos = mul(v, mvp);
	oNormal = normal;
	oTexcoord0 = texcoord0;
}

float4 VertexDisplacementPS(float2 texCoord : TEXCOORD0, float3 normal : TEXCOORD1) : SV_Target
{
	float3 l = -lightDir;
	float3 n = normalize(normal);
	return float4(CalcBRDFShading(pow(max(flag_tex.Sample(flagSampler, texCoord).rgb, 0), 2.2f), l, n), 1);
}
		]]>
	</shader>

	<technique name="VertexDisplacement">
		<pass name="p0">
			<state name="vertex_shader" value="VertexDisplacementVS()"/>
			<state name="pixel_shader" value="VertexDisplacementPS()"/>
		</pass>
	</technique>
</effect>

<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="util.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="proj"/>
		<parameter type="float4x4" name="inv_view"/>
		<parameter type="float4x4" name="inv_proj"/>
		<parameter type="float3" name="near_q_far"/>
		<parameter type="float" name="ray_length"/>
	</cbuffer>

	<cbuffer name="pp_params">
		<parameter type="int" name="min_samples"/>
		<parameter type="int" name="max_samples"/>
	</cbuffer>
	
	<parameter type="texture2D" name="g_buffer_rt0_tex"/>
	<parameter type="texture2DMS" name="g_buffer_rt0_tex_ms"/>
	<parameter type="texture2D" name="g_buffer_rt1_tex"/>
	<parameter type="texture2DMS" name="g_buffer_rt1_tex_ms"/>
	<parameter type="texture2D" name="front_side_depth_tex"/>
	<parameter type="texture2D" name="front_side_tex"/>
	<parameter type="texture2D" name="back_side_depth_tex"/>
	<parameter type="texture2D" name="back_side_tex"/>
	<parameter type="texture2D" name="foreground_depth_tex"/>
	<parameter type="texture2DMS" name="foreground_depth_tex_ms"/>

	<parameter type="sampler" name="ssr_linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="ssr_point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="textureCUBE" name="ssr_skybox_tex"/>
	<parameter type="textureCUBE" name="ssr_skybox_C_tex"/>

	<shader>
		<![CDATA[
float4 CalcSSR(float2 tc, float3 normal, float3 pos_es, float3 incident_es, float4x4 proj, float3 near_q_far, bool front_side, float depth_threshold)
{
	normal = normalize(normal); // eye space normal 
	float3 view_dir = normalize(pos_es); // eye space view direction
	
	float linear_depth = pos_es.z;
	float non_linear_depth = linear_depth_to_non_linear(linear_depth, near_q_far.x, near_q_far.y);
	float3 tex_pos = float3(tc, non_linear_depth); // let z component be projected nonlinear depth, so we can do linear interpolation in screen space
	
	float2 tex_ddx = ddx(tc.xy);
	float2 tex_ddy = ddy(tc.xy);

	float3 reflect_vec = normalize(reflect(incident_es, normal)); // eye space reflect vector
	float4 proj_ray_end = mul(float4(pos_es + reflect_vec * ray_length, 1), proj);
	proj_ray_end.xyz /= proj_ray_end.w;
	float3 tex_reflect_pos = float3(TexCoordFromPos(proj_ray_end), proj_ray_end.z);
	float3 tex_reflect_vec = tex_reflect_pos - tex_pos;
	
	// the reflect vector completely perpendiculars to screen
	[branch]
	if (!any(tex_reflect_vec.xy))
	{
		return 0;
	}
	else
	{
		// try to compute the intersection point of reflection vector and screen edge
		float t1 = 1;
		if (tex_reflect_pos.x < 0)
		{
			t1 = -tex_pos.x / tex_reflect_vec.x;
		}
		else if (tex_reflect_pos.x > 1)
		{
			t1 = (1 - tex_pos.x) / tex_reflect_vec.x;
		}

		float t2 = 1;
		if (tex_reflect_pos.y < 0)
		{
			t2 = -tex_pos.y / tex_reflect_vec.y;
		}
		else if (tex_reflect_pos.y > 1)
		{
			t2 = (1 - tex_pos.y) / tex_reflect_vec.y;
		}

		float3 tex_offset = min(t1, t2) * tex_reflect_vec;

		float orientation_factor = reflect_vec.z;
		int num_steps = (int)lerp(max_samples, min_samples, abs(orientation_factor));

		float4 sample_step = float4(tex_offset, 1) / num_steps;

		float3 cur_tex_pos = tex_pos;

		float t = 0;
		float4 pt = linear_depth;
		for (int sample_index = 0; sample_index < num_steps; ++ sample_index)
		{
			cur_tex_pos += sample_step.xyz;
			float cur_sample_depth;
			if (front_side)
			{
				cur_sample_depth = front_side_depth_tex.SampleGrad(ssr_linear_sampler, cur_tex_pos.xy, tex_ddx, tex_ddy).x;
			}
			else
			{
				cur_sample_depth = back_side_depth_tex.SampleGrad(ssr_linear_sampler, cur_tex_pos.xy, tex_ddx, tex_ddy).x;
			}
			float cur_ray_march_depth = non_linear_depth_to_linear(cur_tex_pos.z, near_q_far.x, near_q_far.y);

			t += sample_step.w;

			if (cur_ray_march_depth > cur_sample_depth)
			{
				pt.zw = float2(cur_sample_depth, cur_ray_march_depth);
				break;
			}
			else
			{
				pt.xy = float2(cur_sample_depth, cur_ray_march_depth);
			}
		}

		float delta1 = pt.x - pt.y;
		float delta2 = pt.z - pt.w;
		float delta = delta1 - delta2;
		t = (delta1 * t - delta2 * (t - sample_step.w)) / delta;
		float3 sample_tex_pos = tex_pos + t * tex_offset;

		float sample_z;
		if (front_side)
		{
			sample_z = front_side_depth_tex.SampleGrad(ssr_linear_sampler, sample_tex_pos.xy, tex_ddx, tex_ddy).x;
		}
		else
		{
			sample_z = back_side_depth_tex.SampleGrad(ssr_linear_sampler, sample_tex_pos.xy, tex_ddx, tex_ddy).x;
		}

		float4 ret;
		if ((sample_z < near_q_far.z - 1e-6f)
			&& (abs(sample_z - non_linear_depth_to_linear(sample_tex_pos.z, near_q_far.x, near_q_far.y)) < depth_threshold))
		{
			float reflect_dir_fade_out_factor = 1 - orientation_factor;
			float screen_edge_fade_out_factor = saturate((distance(sample_tex_pos.xy, 0.5f) - 0.4f) * 3);

			if (front_side)
			{
				ret.xyz = front_side_tex.SampleGrad(ssr_linear_sampler, sample_tex_pos.xy, tex_ddx, tex_ddx).rgb;
			}
			else
			{
				ret.xyz = back_side_tex.SampleGrad(ssr_linear_sampler, sample_tex_pos.xy, tex_ddx, tex_ddx).rgb;
			}
			ret.w = 1 - max(screen_edge_fade_out_factor, reflect_dir_fade_out_factor);
		}
		else
		{
			float3 reflect_vec_ws = mul(reflect_vec, (float3x3)inv_view);
			float4 sky = decode_hdr_yc(ssr_skybox_tex.SampleLevel(ssr_linear_sampler, reflect_vec_ws, 0).r,
				ssr_skybox_C_tex.SampleLevel(ssr_linear_sampler, reflect_vec_ws, 0));

			ret = sky;
		}

		return ret;
	}
}

void ScreenSpaceReflectionPostProcessVS(float4 pos : POSITION,
				out float2 oTc0 : TEXCOORD0,
				out float3 oViewDir : TEXCOORD1,
				out float4 oPos : SV_Position)
{
	PostProcessVS(pos, oTc0, oPos);
	oViewDir = mul(oPos, inv_proj).xyz;
}

float4 ScreenSpaceReflectionPostProcessPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1,
	uint sample_index : SV_SampleIndex) : SV_Target
{
#if KLAYGE_EXPLICIT_MULTI_SAMPLE_SUPPORT && MULTI_SAMPLE_INPUT
	uint width, height, samples;
	g_buffer_rt0_tex_ms.GetDimensions(width, height, samples);
	int2 coord = tc * int2(width, height);

	float4 rt0 = g_buffer_rt0_tex_ms.Load(coord, sample_index);
	float4 rt1 = g_buffer_rt1_tex_ms.Load(coord, sample_index);
	float depth = foreground_depth_tex_ms.Load(coord, sample_index).x;
#else
	float4 rt0 = g_buffer_rt0_tex.Sample(ssr_point_sampler, tc);
	float4 rt1 = g_buffer_rt1_tex.Sample(ssr_point_sampler, tc);
	float depth = foreground_depth_tex.Sample(ssr_point_sampler, tc).x;
#endif

	float3 pos_es = view_dir * (depth / view_dir.z);
	float3 normal = GetNormal(rt0);
	float4 clr = CalcSSR(tc, normal, pos_es, pos_es, proj, near_q_far, 1, 0.1f);
	float fresnel = FresnelTerm(-view_dir, normal, GetSpecular(rt1)).x;
	return float4(clr.xyz, saturate(clr.w * fresnel));
}
		]]>
	</shader>

	<technique name="ScreenSpaceReflectionPostProcess">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="equal"/>
			<state name="front_stencil_ref" value="64"/>
			<state name="front_stencil_pass" value="keep"/>
			<state name="front_stencil_read_mask" value="192"/>
			<state name="front_stencil_write_mask" value="0"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="equal"/>
			<state name="back_stencil_ref" value="64"/>
			<state name="back_stencil_pass" value="keep"/>
			<state name="back_stencil_read_mask" value="192"/>
			<state name="back_stencil_write_mask" value="0"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="zero"/>
			<state name="dest_blend_alpha" value="one"/>

			<state name="vertex_shader" value="ScreenSpaceReflectionPostProcessVS()"/>
			<state name="pixel_shader" value="ScreenSpaceReflectionPostProcessPS()"/>
		</pass>
	</technique>
	<technique name="ScreenSpaceReflectionPostProcessMS" inherit="ScreenSpaceReflectionPostProcess">
		<macro name="MULTI_SAMPLE_INPUT" value="1"/>
	</technique>
</effect>

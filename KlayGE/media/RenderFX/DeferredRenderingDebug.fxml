<?xml version='1.0'?>

<effect>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="util.fxml"/>
	
	<cbuffer name="per_frame">
		<parameter type="float4x4" name="inv_proj"/>
		<parameter type="float3" name="depth_near_far_invfar"/>
	</cbuffer>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="g_buffer_rt0_tex"/>
	<parameter type="texture2D" name="g_buffer_rt1_tex"/>
	<parameter type="texture2D" name="g_buffer_rt2_tex"/>
	<parameter type="texture2D" name="depth_tex"/>
	<parameter type="texture2D" name="lighting_tex"/>
	<parameter type="texture2D" name="ssvo_tex"/>

	<shader>
		<![CDATA[
void ShowQuadVS(float4 pos : POSITION,
				out float2 oTc0 : TEXCOORD0,
				out float3 oViewDir : TEXCOORD1,
				out float4 oPos : SV_Position)
{
	PostProcessVS(pos, oTc0, oPos);
	oViewDir = mul(oPos, inv_proj).xyz;
}

float4 ShowPositionPS(float2 tc0 : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	float3 pos_es = view_dir * (depth_tex.Sample(point_sampler, tc0).x / view_dir.z);
	return float4(pos_es * 0.03f, 1);
}

float4 ShowNormalPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float4 rt0 = g_buffer_rt0_tex.Sample(point_sampler, tc0);
	float3 normal = GetNormal(rt0);	
	return float4(normal / 2 + 0.5f, 1);
}

float4 ShowDepthPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	return float4((depth_tex.Sample(point_sampler, tc0).x * depth_near_far_invfar.z * 10).xxx, 1);
}

float4 ShowDiffusePS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float4 rt1 = g_buffer_rt1_tex.Sample(point_sampler, tc0);
	float3 diffuse = GetDiffuse(rt1);
	return float4(diffuse, 1);
}

float4 ShowSpecularPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float4 rt1 = g_buffer_rt1_tex.Sample(point_sampler, tc0);
	float3 specular = GetSpecular(rt1);
	return float4(specular, 1);
}

float4 ShowShininessPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float4 rt0 = g_buffer_rt0_tex.Sample(point_sampler, tc0);
	float shininess = Glossiness2Shininess(GetGlossiness(rt0));
	return float4(shininess.xxx / 256, 1);
}

float4 ShowMotionVecPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float4 rt2 = g_buffer_rt2_tex.Sample(point_sampler, tc0);
	float2 motion_vec = GetMotionVec(rt2);
	return float4(abs(motion_vec) * 30, 1, 1);
}

float4 ShowOcclusionPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float4 rt2 = g_buffer_rt2_tex.Sample(point_sampler, tc0);
	float occlusion = GetOcclusion(rt2);
	return float4(occlusion.xxx, 1);
}

float4 ShowSSVOPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	return ssvo_tex.Sample(point_sampler, tc0).x;
}

float4 ShowDiffuseLightingPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	return lighting_tex.Sample(point_sampler, tc0);
}

float4 ShowSpecularLightingPS(float2 tc0 : TEXCOORD0) : SV_Target
{
	float4 lighting = lighting_tex.Sample(point_sampler, tc0);
	float3 spec_lighting = lighting.a / (dot(lighting.rgb, float3(0.2126f, 0.7152f, 0.0722f)) + 1e-6f) * lighting.rgb;
	return float4(spec_lighting, 1);
}
		]]>
	</shader>

	<technique name="ShowPosition">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>
			
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowPositionPS()"/>
		</pass>
	</technique>

	<technique name="ShowNormal">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>
	
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowNormalPS()"/>
		</pass>
	</technique>

	<technique name="ShowDepth">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>
			
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowDepthPS()"/>
		</pass>
	</technique>

	<technique name="ShowDiffuse">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowDiffusePS()"/>
		</pass>
	</technique>

	<technique name="ShowSpecular">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowSpecularPS()"/>
		</pass>
	</technique>

	<technique name="ShowShininess">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowShininessPS()"/>
		</pass>
	</technique>

	<technique name="ShowMotionVec">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowMotionVecPS()"/>
		</pass>
	</technique>

	<technique name="ShowOcclusion">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowOcclusionPS()"/>
		</pass>
	</technique>

	<technique name="ShowSSVO">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowSSVOPS()"/>
		</pass>
	</technique>

	<technique name="ShowDiffuseLighting">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowDiffuseLightingPS()"/>
		</pass>
	</technique>

	<technique name="ShowSpecularLighting">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="ShowQuadVS()"/>
			<state name="pixel_shader" value="ShowSpecularLightingPS()"/>
		</pass>
	</technique>
</effect>

<?xml version='1.0'?>

<effect>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="util.fxml"/>
	<include name="Lighting.fxml"/>
	<include name="Material.fxml"/>
	<include name="Mesh.fxml"/>
	<include name="ModelCamera.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4" name="object_id"/>
		<parameter type="int2" name="frame_size"/>
		<parameter type="float" name="half_exposure_x_framerate"/>
		<parameter type="float" name="motion_blur_radius"/>
	</cbuffer>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>
	<parameter type="sampler" name="bilinear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler" name="trilinear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler" name="aniso_sampler">
		<state name="filtering" value="anisotropic"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
		<state name="max_anisotropy" value="4"/>
	</parameter>

	<parameter type="texture2D" name="opaque_depth_tex"/>

	<shader_graph_nodes>
		<node name="PositionNode" return="void" impl="StaticPositionNode">
			<param type="float3" name="pos"/>
			<param type="float4" name="tangent_quat"/>
			<param type="float4" name="blend_weights"/>
			<param type="int4" name="blend_indices"/>
			<param type="out float3" name="result_pos"/>
			<param type="out float4" name="result_tangent_quat"/>
		</node>
		<node name="TexcoordNode" return="float2" impl="StaticTexcoordNode">
			<param type="float2" name="texcoord"/>
		</node>

		<node name="AlbedoNode" return="float3" impl="StaticAlbedoNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="MetalnessGlossinessNode" return="float2" impl="StaticMetalnessGlossinessNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="EmissiveNode" return="float3" impl="StaticEmissiveNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="OpacityNode" return="float" impl="StaticOpacityNode">
			<param type="float2" name="texcoord"/>
		</node>

		<node name="NormalNode" return="float3" impl="StaticNormalNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="HeightForParallaxNode" return="float" impl="StaticHeightForParallaxNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="HeightForParallaxOcclusionNode" return="float" impl="StaticHeightForParallaxOcclusionNode">
			<param type="float2" name="texcoord"/>
			<param type="int" name="level"/>
		</node>
		<node name="HeightForTessellationNode" return="float" impl="StaticHeightForTessellationNode">
			<param type="float2" name="texcoord"/>
		</node>

		<node name="OcclusionNode" return="float" impl="StaticOcclusionNode">
			<param type="float2" name="texcoord"/>
		</node>

		<node name="PositionAdjustmentNode" return="float3" impl="DefaultPositionAdjustmentNode">
			<param type="float3" name="pos"/>
			<param type="float4" name="tangent_quat"/>
		</node>

		<node name="TexcoordAdjustmentNode" return="float2" impl="DefaultTexcoordAdjustmentNode">
			<param type="float2" name="texcoord"/>
			<param type="float3" name="view_ray"/>
		</node>
	</shader_graph_nodes>

	<shader>
		<![CDATA[
void GBufferVS(
#if MULTI_VIEW_MODE
			uint instance_id : SV_InstanceID,
#endif
			float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			float4 tangent_quat : TANGENT,
#if NUM_JOINTS > 0
			float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
			float4 blend_indices_f : BLENDINDICES,
#else
			uint4 blend_indices : BLENDINDICES,
#endif
#endif
			out float4 oTexCoord_2xy : TEXCOORD0,
			out float4 oTsToView0_2z : TEXCOORD1,
			out float4 oTsToView1_Depth : TEXCOORD2,
			out SS_TEXCOORD_TYPE oScreenTc : TEXCOORD3,
			out float4 oCurrPosSS : TEXCOORD4,
			out float4 oPrevPosSS : TEXCOORD5,
#if MULTI_VIEW_MODE
#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
			out uint oRtIndex : SV_RenderTargetArrayIndex,
			out float4 oPos : SV_Position
#else
			out float oRtIndex : TEXCOORD6,
			out float4 oPos : POSITION
#endif
#else
			out float4 oPos : SV_Position
#endif
			)
{
#if NUM_JOINTS > 0
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#else
	float4 blend_weights = 0;
	int4 blend_indices = 0;
#endif

#if MULTI_VIEW_MODE
	uint camera_index = CameraIndex(instance_id);
#else
	uint camera_index = 0;
#endif
	KlayGECameraInfo camera = cameras[camera_index];
	float4x4 mvp = camera.mvp;
	float4x4 model_view = camera.model_view;

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	float3 result_pos;
	float4 result_tangent_quat;
	PositionNode(pos.xyz, tangent_quat, blend_weights, blend_indices, result_pos, result_tangent_quat);
	oTexCoord_2xy.xy = TexcoordNode(texcoord);

	oPos = mul(float4(result_pos, 1), mvp);

	float3x3 obj_to_ts;
	obj_to_ts[0] = transform_quat(float3(1, 0, 0), result_tangent_quat);
	obj_to_ts[1] = transform_quat(float3(0, 1, 0), result_tangent_quat) * sign(result_tangent_quat.w);
	obj_to_ts[2] = transform_quat(float3(0, 0, 1), result_tangent_quat);
	float3x3 ts_to_view = mul(obj_to_ts, (float3x3)model_view);
	oTsToView0_2z.xyz = ts_to_view[0];
	oTsToView1_Depth.xyz = ts_to_view[1];
	oTexCoord_2xy.zw = ts_to_view[2].xy;
	oTsToView0_2z.w = ts_to_view[2].z;

	oTsToView1_Depth.w = oPos.w;

	oScreenTc = EncodeSSTexcoord(oPos);

	oCurrPosSS = oPos;
	oPrevPosSS = mul(float4(result_pos, 1), prev_mvps[camera_index]);

	uint rt_index = RenderTargetIndex(camera_index);
#if MULTI_VIEW_MODE
#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
	oRtIndex = rt_index;
#else
	oRtIndex = rt_index + 0.5f;
#endif
#endif
}

float2 ParallaxMappingCorrection(float2 uv, float3 view)
{
	uv += view.xy * HeightForParallaxNode(uv);
	return uv;
}

float3 RestoreNormal(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float3 normal = normalize(float3(texcoord_2xy.zw, ts_to_view0_2z.w));

	float3x3 ts_to_view;
	ts_to_view[0] = normalize(ts_to_view0_2z.xyz);
	ts_to_view[1] = normalize(ts_to_view1);
	ts_to_view[2] = normal;
	normal = normalize(mul(NormalNode(texcoord_2xy.xy) * float3(normal_scale.xx, 1), ts_to_view));

	return normal;
}

void ConstructGBuffer(float revert_normal, float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1, float2 motion_vec,
					out float4 rt0, out float4 rt1, out float4 rt2)
{
	float3 normal = RestoreNormal(texcoord_2xy, ts_to_view0_2z, ts_to_view1) * revert_normal;

	float3 albedo = AlbedoNode(texcoord_2xy.xy);
	float2 metalness_glossiness = MetalnessGlossinessNode(texcoord_2xy.xy);

	float occlusion = OcclusionNode(texcoord_2xy.xy);

	StoreGBuffer(normal, albedo, metalness_glossiness, motion_vec, occlusion,
		rt0, rt1, rt2);
}

float2 GenerateVelocity(float4 curr_pos_ss, float4 prev_pos_ss, float half_exposure_x_framerate)
{
	const float EPSILON = 0.01f;

	float2 velocity = (curr_pos_ss.xy / curr_pos_ss.w - prev_pos_ss.xy / prev_pos_ss.w) * half_exposure_x_framerate;
	float len_velocity = length(velocity);

	float weight = max(0.5f, min(len_velocity, motion_blur_radius));
	weight /= max(len_velocity, EPSILON);
	velocity *= weight;
	velocity.y *= KLAYGE_FLIPPING;
	return velocity;
}

void GBufferPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
					SS_TEXCOORD_TYPE ss_tc : TEXCOORD3,
					float4 curr_pos_ss : TEXCOORD4, float4 prev_pos_ss : TEXCOORD5,
					bool is_front_face : SV_IsFrontFace,
					out float4 rt0 : SV_Target0, out float4 rt1 : SV_Target1
#if !SKIP_MOTION_VEC
					, out float4 rt2 : SV_Target2
#endif
	)
{
	float3 view = -normalize(float3(ts_to_view0_2z.z, ts_to_view1_depth.z, ts_to_view0_2z.w));
	texcoord_2xy.xy = TexcoordAdjustmentNode(texcoord_2xy.xy, view);

#if ALPHA_TEST_MODE
	float opacity = OpacityNode(texcoord_2xy.xy);
	clip(opacity - alpha_test_threshold);
#endif

#if !SKIP_MOTION_VEC
	float2 motion_vec = GenerateVelocity(curr_pos_ss, prev_pos_ss, half_exposure_x_framerate);
#else
	float2 motion_vec = 0;
	float4 rt2;
#endif

	ConstructGBuffer(is_front_face ? 1 : -1, texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz, motion_vec, rt0, rt1, rt2);
}

void GBufferAlphaBlendPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
					SS_TEXCOORD_TYPE ss_tc : TEXCOORD3,
					float4 curr_pos_ss : TEXCOORD4, float4 prev_pos_ss : TEXCOORD5,
					out float4 rt0 : SV_Target0, out float4 rt1 : SV_Target1
#if !SKIP_MOTION_VEC
					, out float4 rt2 : SV_Target2
#endif
	)
{
	float2 screen_tc = DecodeSSTexcoord(ss_tc);
	clip(opaque_depth_tex.Sample(point_sampler, screen_tc).x - ts_to_view1_depth.w);

	GBufferPS(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth, ss_tc, curr_pos_ss, prev_pos_ss, true,
		rt0, rt1
#if !SKIP_MOTION_VEC
		, rt2
#endif
		);
}
		]]>
	</shader>

	<shader version="4">
		<![CDATA[
bool FrustumCulling(float4 pos0, float4 pos1, float4 pos2)
{
	float4 t0 = saturate(pos0.xyxy * float4(-1, -1, 1, 1) - pos0.w);
	float4 t1 = saturate(pos1.xyxy * float4(-1, -1, 1, 1) - pos1.w);
	float4 t2 = saturate(pos2.xyxy * float4(-1, -1, 1, 1) - pos2.w);
	float4 t = t0 * t1 * t2;
	return !any(t);
}

struct GBufferPS_In
{
	float4 texcoord_2xy : TEXCOORD0;
	float4 ts_to_view0_2z : TEXCOORD1;
	float3 ts_to_view1 : TEXCOORD2;
	SS_TEXCOORD_TYPE ss_tc : TEXCOORD3;
	float4 curr_pos_ss : TEXCOORD4;
	float4 prev_pos_ss : TEXCOORD5;
	uint rt_index : SV_RenderTargetArrayIndex;
	float4 position : SV_Position;
};

[maxvertexcount(3)]
void GBufferNoVpRtGS(triangle float4 in_texcoord_2xy[3] : TEXCOORD0, triangle float4 in_ts_to_view0_2z[3] : TEXCOORD1,
	triangle float3 in_ts_to_view1[3] : TEXCOORD2, triangle SS_TEXCOORD_TYPE in_ss_tc[3] : TEXCOORD3,
	triangle float4 in_curr_pos_ss[3] : TEXCOORD4, triangle float4 in_prev_pos_ss[3] : TEXCOORD5,
	triangle float in_rt_index[3] : TEXCOORD6, triangle float4 in_position[3] : POSITION,
	inout TriangleStream<GBufferPS_In> out_stream)
{
	GBufferPS_In output;
	output.rt_index = (uint)in_rt_index[0];

	[branch]
	if (FrustumCulling(in_position[0], in_position[1], in_position[2]))
	{
		[unroll]
		for (int v = 0; v < 3; ++ v)
		{
			output.texcoord_2xy = in_texcoord_2xy[v];
			output.ts_to_view0_2z = in_ts_to_view0_2z[v];
			output.ts_to_view1 = in_ts_to_view1[v];
			output.ss_tc = in_ss_tc[v];
			output.curr_pos_ss = in_curr_pos_ss[v];
			output.prev_pos_ss = in_prev_pos_ss[v];
			output.position = in_position[v];
			out_stream.Append(output);
		}
	}
}
		]]>
	</shader>

	<technique name="GBufferTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaTestTech" inherit="GBufferTech">
		<macro name="ALPHA_TEST_MODE" value="1"/>
		<pass name="p0">
			<state name="pixel_shader" value="GBufferPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendBackTech" inherit="GBufferTech">
		<pass name="p0">
			<state name="depth_func" value="greater"/>

			<state name="cull_mode" value="front"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="0"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="0"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="pixel_shader" value="GBufferAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontTech" inherit="GBufferAlphaBlendBackTech">
		<pass name="p0">
			<state name="depth_func" value="less"/>

			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="GBufferMultiViewTech" inherit="GBufferTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>
	<technique name="GBufferAlphaTestMultiViewTech" inherit="GBufferAlphaTestTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>
	<technique name="GBufferAlphaBlendBackMultiViewTech" inherit="GBufferAlphaBlendBackTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>
	<technique name="GBufferAlphaBlendFrontMultiViewTech" inherit="GBufferAlphaBlendFrontTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>

	<technique name="GBufferMultiViewNoVpRtTech" inherit="GBufferMultiViewTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaTestMultiViewNoVpRtTech" inherit="GBufferAlphaTestMultiViewTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendBackMultiViewNoVpRtTech" inherit="GBufferAlphaBlendBackMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontMultiViewNoVpRtTech" inherit="GBufferAlphaBlendFrontMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>

	<technique name="GenReflectiveShadowMapTech" inherit="GBufferTech">
		<macro name="SKIP_MOTION_VEC" value="1"/>
	</technique>
	<technique name="GenReflectiveShadowMapAlphaTestTech" inherit="GenReflectiveShadowMapTech">
		<macro name="ALPHA_TEST_MODE" value="1"/>
	</technique>

	<technique name="GenReflectiveShadowMapMultiViewTech" inherit="GenReflectiveShadowMapTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>
	<technique name="GenReflectiveShadowMapAlphaTestMultiViewTech" inherit="GenReflectiveShadowMapAlphaTestTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>

	<technique name="GenReflectiveShadowMapMultiViewNoVpRtTech" inherit="GenReflectiveShadowMapMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="GenReflectiveShadowMapAlphaTestMultiViewNoVpRtTech" inherit="GenReflectiveShadowMapAlphaTestMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void GenShadowMapVS(
#if MULTI_VIEW_MODE
						uint instance_id : SV_InstanceID,
#endif
						float4 pos : POSITION,
						float2 texcoord : TEXCOORD0,
						float4 tangent_quat : TANGENT,
#if NUM_JOINTS > 0
						float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
						float4 blend_indices_f : BLENDINDICES,
#else
						uint4 blend_indices : BLENDINDICES,
#endif
#endif
						out float3 oTc : TEXCOORD0,
#if MULTI_VIEW_MODE
#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
						out uint oRtIndex : SV_RenderTargetArrayIndex,
						out float4 oPos : SV_Position
#else
						out float oRtIndex : TEXCOORD1,
						out float4 oPos : POSITION
#endif
#else
						out float4 oPos : SV_Position
#endif
						)
{
#if NUM_JOINTS > 0
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#else
	float4 blend_weights = 0;
	int4 blend_indices = 0;
#endif

#if MULTI_VIEW_MODE
	uint camera_index = CameraIndex(instance_id);
#else
	uint camera_index = 0;
#endif
	KlayGECameraInfo camera = cameras[camera_index];
	float4x4 mvp = camera.mvp;
	float4x4 model_view = camera.model_view;

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	float3 result_pos;
	float4 result_tangent_quat;
	PositionNode(pos.xyz, tangent_quat, blend_weights, blend_indices, result_pos, result_tangent_quat);
	result_pos = PositionAdjustmentNode(result_pos, result_tangent_quat);
	oTc.xy = TexcoordNode(texcoord);

	oPos = mul(float4(result_pos, 1), mvp);
	oTc.z = mul(float4(result_pos, 1), model_view).z;

	uint rt_index = RenderTargetIndex(camera_index);
#if MULTI_VIEW_MODE
#if KLAYGE_VP_RT_INDEX_AT_EVERY_STAGE_SUPPORT
	oRtIndex = rt_index;
#else
	oRtIndex = rt_index + 0.5f;
#endif
#endif
}

float4 GenShadowMapPS(float3 tc : TEXCOORD0) : SV_Target
{
	return tc.z;
}

float4 GenShadowMapAlphaTestPS(float3 tc : TEXCOORD0) : SV_Target
{
	float opacity = OpacityNode(tc.xy);
	clip(opacity - alpha_test_threshold);
	return tc.z;
}
		]]>
	</shader>

	<shader version="4">
		<![CDATA[
struct GenShadowMapPS_In
{
	float3 tc : TEXCOORD0;
	uint rt_index : SV_RenderTargetArrayIndex;
	float4 position : SV_Position;
};

[maxvertexcount(3)]
void GenShadowCubemapNoVpRtGS(triangle float3 in_tc[3] : TEXCOORD0, triangle float in_rt_index[3] : TEXCOORD1,
	triangle float4 in_position[3] : POSITION, inout TriangleStream<GenShadowMapPS_In> out_stream)
{
	GenShadowMapPS_In output;
	output.rt_index = (uint)in_rt_index[0];

	[branch]
	if (FrustumCulling(in_position[0], in_position[1], in_position[2]))
	{
		[unroll]
		for (int v = 0; v < 3; ++ v)
		{
			output.tc = in_tc[v];
			output.position = in_position[v];
			out_stream.Append(output);
		}
	}
}
		]]>
	</shader>

	<technique name="GenShadowMapTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="color_write_mask" value="0"/>

			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>
	<technique name="GenShadowMapAlphaTestTech" inherit="GenShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="GenShadowMapMultiViewTech" inherit="GenShadowMapTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>
	<technique name="GenShadowMapAlphaTestMultiViewTech" inherit="GenShadowMapAlphaTestTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>

	<technique name="GenShadowMapMultiViewNoVpRtTech" inherit="GenShadowMapMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GenShadowCubemapNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="GenShadowMapAlphaTestMultiViewNoVpRtTech" inherit="GenShadowMapAlphaTestMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GenShadowCubemapNoVpRtGS()"/>
		</pass>
	</technique>

	<technique name="GenCascadedShadowMapTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_clip_enable" value="false"/>

			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>
	<technique name="GenCascadedShadowMapAlphaTestTech" inherit="GenCascadedShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="GenCascadedShadowMapMultiViewTech" inherit="GenCascadedShadowMapTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>
	<technique name="GenCascadedShadowMapAlphaTestMultiViewTech" inherit="GenCascadedShadowMapAlphaTestTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>

	<technique name="GenCascadedShadowMapMultiViewNoVpRtTech" inherit="GenCascadedShadowMapMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GenShadowCubemapNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="GenCascadedShadowMapAlphaTestMultiViewNoVpRtTech" inherit="GenCascadedShadowMapAlphaTestMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GenShadowCubemapNoVpRtGS()"/>
		</pass>
	</technique>


	<shader>
		<![CDATA[
float4 SpecialShadingPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float3 emissive = EmissiveNode(texcoord);
	return float4(max(emissive, 0), 1);
}

float4 SpecialShadingAlphaBlendPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float4 shading = SpecialShadingPS(texcoord);

	float opacity = OpacityNode(texcoord);
	return float4(shading.xyz, opacity);
}
		]]>
	</shader>

	<technique name="SpecialShadingTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_enable" value="true"/>
			<state name="depth_func" value="equal"/>
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="src_alpha"/>
			<state name="dest_blend_alpha" value="zero"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="SpecialShadingPS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendBackTech" inherit="SpecialShadingTech">
		<pass name="p0">
			<state name="cull_mode" value="front"/>

			<state name="pixel_shader" value="SpecialShadingAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendFrontTech" inherit="SpecialShadingAlphaBlendBackTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="SpecialShadingMultiViewTech" inherit="SpecialShadingTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>
	<technique name="SpecialShadingAlphaBlendBackMultiViewTech" inherit="SpecialShadingAlphaBlendBackTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>
	<technique name="SpecialShadingAlphaBlendFrontMultiViewTech" inherit="SpecialShadingAlphaBlendFrontTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>

	<technique name="SpecialShadingMultiViewNoVpRtTech" inherit="SpecialShadingMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendBackMultiViewNoVpRtTech" inherit="SpecialShadingAlphaBlendBackMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendFrontMultiViewNoVpRtTech" inherit="SpecialShadingAlphaBlendFrontMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
float4 SelectModePS() : SV_Target
{
	return object_id;
}
		]]>
	</shader>

	<technique name="SelectModeTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="SelectModePS()"/>
		</pass>
	</technique>

	<technique name="SelectModeMultiViewTech" inherit="SelectModeTech">
		<macro name="MULTI_VIEW_MODE" value="1"/>
	</technique>

	<technique name="SelectModeMultiViewNoVpRtTech" inherit="SelectModeMultiViewTech">
		<pass name="p0">
			<state name="geometry_shader" value="GBufferNoVpRtGS()"/>
		</pass>
	</technique>


	<shader>
		<![CDATA[
void StaticPositionNode(float3 pos, float4 tangent_quat, float4 blend_weights, int4 blend_indices,
	out float3 result_pos, out float4 result_tangent_quat)
{
	result_pos = pos.xyz;
	result_tangent_quat = normalize(tangent_quat);
}

float2 StaticTexcoordNode(float2 texcoord)
{
	return texcoord;
}

float3 StaticAlbedoNode(float2 texcoord)
{
	float3 albedo = albedo_clr.rgb;
	if (albedo_map_enabled)
	{
		albedo *= albedo_tex.Sample(aniso_sampler, texcoord).rgb;
	}
	return albedo;
}

float2 StaticMetalnessGlossinessNode(float2 texcoord)
{
	float2 metalness_glossiness = metalness_glossiness_factor.xy;
	if (metalness_glossiness_factor.z > 0.5f)
	{
		metalness_glossiness *= get_xy_channel(metalness_glossiness_tex.Sample(aniso_sampler, texcoord));
	}
	return metalness_glossiness;
}

float3 StaticEmissiveNode(float2 texcoord)
{
	float3 emissive = emissive_clr.rgb;
	if (emissive_clr.w > 0.5f)
	{
		emissive *= emissive_tex.Sample(aniso_sampler, texcoord).rgb;
	}
	return emissive;
}

float StaticOpacityNode(float2 texcoord)
{
	float opacity = albedo_clr.a;
	if (albedo_map_enabled)
	{
		opacity *= albedo_tex.Sample(bilinear_sampler, texcoord).a;
	}
	return opacity;
}

float3 StaticNormalNode(float2 texcoord)
{
	float3 normal = float3(0, 0, 1);
	if (normal_map_enabled)
	{
		normal = decompress_normal(normal_tex.Sample(trilinear_sampler, texcoord));
	}
	return normal;
}

float StaticHeightForParallaxNode(float2 texcoord)
{
	float height = 0;
	if (height_map_parallax_enabled)
	{
		height = (height_tex.Sample(trilinear_sampler, texcoord).x + height_offset_scale.x) * height_offset_scale.y;
	}
	return height;
}

float StaticHeightForParallaxOcclusionNode(float2 texcoord, int level)
{
	float height = 0;
	if (height_map_parallax_enabled)
	{
		height = height_tex.SampleLevel(trilinear_sampler, texcoord, level).x;
	}
	return height;
}

float StaticHeightForTessellationNode(float2 texcoord)
{
	float height = 0;
	if (height_map_tess_enabled)
	{
		height = (height_tex.SampleLevel(bilinear_sampler, texcoord, 0).x + height_offset_scale.x) * 0.1f * height_offset_scale.y;
	}
	return height;
}

float StaticOcclusionNode(float2 texcoord)
{
	float occlusion = 1;
	if (occlusion_map_enabled)
	{
		occlusion = get_x_channel(occlusion_tex.Sample(trilinear_sampler, texcoord));
	}
	return occlusion;
}

float3 DefaultPositionAdjustmentNode(float3 position, float4 tangent_quat)
{
	return position;
}

float2 DefaultTexcoordAdjustmentNode(float2 texcoord, float3 view_ray)
{
	return ParallaxMappingCorrection(texcoord, view_ray);
}
		]]>
	</shader>
</effect>

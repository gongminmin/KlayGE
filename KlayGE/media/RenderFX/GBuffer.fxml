<?xml version='1.0'?>

<effect>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="util.fxml"/>

	<macro name="ALPHA_TEST_THRESHOLD" value="0.2"/>
	<macro name="NORMAL_THRESHOLD" value="0.7"/>
	
	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp"/>
		<parameter type="float4x4" name="model_view"/>
		<parameter type="float4x4" name="inv_mv"/>
		<parameter type="float2" name="far_plane"/>
		<parameter type="float" name="height_scale" value="0.06"/>
	</cbuffer>

	<cbuffer name="per_model">
		<parameter type="float3" name="pos_center"/>
		<parameter type="float3" name="pos_extent"/>
		<parameter type="float2" name="tc_center"/>
		<parameter type="float2" name="tc_extent"/>
		<parameter type="float4" name="diffuse_clr"/>
		<parameter type="float4" name="specular_clr"/>
		<parameter type="float2" name="shininess_clr"/>
		<parameter type="float4" name="emit_clr"/>
		<parameter type="float" name="opacity_clr"/>
		<parameter type="int" name="normal_map_enabled"/>
		<parameter type="int" name="height_map_enabled"/>
		<parameter type="int" name="opacity_map_enabled"/>
		<parameter type="float4" name="object_id"/>
	</cbuffer>

	<cbuffer name="skinning">
		<parameter type="float4" name="joint_reals" array_size="NUM_JOINTS"/>
		<parameter type="float4" name="joint_duals" array_size="NUM_JOINTS"/>
	</cbuffer>

	<parameter type="texture2D" name="diffuse_tex"/>
	<parameter type="texture2D" name="specular_tex"/>
	<parameter type="texture2D" name="shininess_tex"/>
	<parameter type="texture2D" name="emit_tex"/>
	<parameter type="texture2D" name="normal_tex"/>
	<parameter type="texture2D" name="height_tex"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>
	<parameter type="sampler" name="bilinear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler" name="trilinear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler" name="aniso_sampler">
		<state name="filtering" value="anisotropic"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
		<state name="max_anisotropy" value="4"/>
	</parameter>

	<parameter type="texture2D" name="opaque_depth_tex"/>
	<parameter type="texture2D" name="g_buffer_rt0_tex"/>

	<parameter type="sampler" name="bilinear_border_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>

	<shader>
		<![CDATA[
#if !KLAYGE_DXBC2GLSL
#if KLAYGE_SHADER_MODEL >= SHADER_MODEL(4, 0)
#define NOPERSPECTIVE_SUPPORT
#endif
#endif

#if SKINNING_ON
void DQSkinned(float3 pos,
			float4 tangent_quat,
			float4 blend_weights,
			int4 blend_indices,
			out float3 result_pos,
			out float4 result_tangent_quat)
{
	float4 dp0 = joint_reals[blend_indices[0]];

	float3 pos_s = 0;
	float4 blend_real = 0;
	float4 blend_dual = 0;
	[unroll]
	for (int i = 0; i < 4; ++ i)
	{
		float4 joint_real = joint_reals[blend_indices[i]];
		float4 joint_dual = joint_duals[blend_indices[i]];
		
		float scale = length(joint_real);
		joint_real /= scale;

		float weight = blend_weights[i];
		
		if (dot(dp0, joint_real) < 0)
		{
			joint_real = -joint_real;
			joint_dual = -joint_dual;
		}

		pos_s += pos * scale * weight;
		blend_real += joint_real * weight;
		blend_dual += joint_dual * weight;
	}

	float len = length(blend_real);
	blend_real /= len;
	blend_dual /= len;

	result_pos = transform_quat(pos_s, blend_real) + 2 * mul_quat(float4(blend_dual.xyz, -blend_dual.w), blend_real).xyz;
	result_tangent_quat = mul_quat(tangent_quat, blend_real);
}
#endif

void CalcMesh(float4 pos,
				float2 tex0,
				float4 tangent_quat,
#if SKINNING_ON
				float4 blend_weights,
				int4 blend_indices,
#endif
				out float2 oTex,
				out float3 oPos,
				out float4 oTangentQuat)
{
#if SKINNING_ON
	DQSkinned(pos.xyz, tangent_quat, blend_weights, blend_indices, oPos, oTangentQuat);
#else
	oPos = pos.xyz;
	oTangentQuat = tangent_quat;
#endif

	oTex = tex0;
	oTangentQuat = normalize(oTangentQuat);
}

void GBufferVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			float4 tangent_quat : TANGENT,
#if SKINNING_ON
			float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
			float4 blend_indices_f : BLENDINDICES,
#else
			uint4 blend_indices : BLENDINDICES,
#endif
#endif
			out float4 oTexCoord_2xy : TEXCOORD0,
			out float4 oTsToView0_2z : TEXCOORD1,
			out float4 oTsToView1_Depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
			out noperspective float2 oScreenTc : TEXCOORD3,
#else
			out float3 oScreenTc : TEXCOORD3,
#endif
			out float4 oPos : SV_Position)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;
	
	float3 result_pos;
	float4 result_tangent_quat;
	CalcMesh(pos, texcoord, tangent_quat,
#if SKINNING_ON
				blend_weights, blend_indices,
#endif
				oTexCoord_2xy.xy, result_pos,
				result_tangent_quat);
				
	oPos = mul(float4(result_pos, 1), mvp);

	float3x3 obj_to_ts;
	obj_to_ts[0] = transform_quat(float3(1, 0, 0), result_tangent_quat);
	obj_to_ts[1] = transform_quat(float3(0, 1, 0), result_tangent_quat) * sign(result_tangent_quat.w);
	obj_to_ts[2] = transform_quat(float3(0, 0, 1), result_tangent_quat);
	float3x3 ts_to_view = mul(obj_to_ts, (float3x3)model_view);
	oTsToView0_2z.xyz = ts_to_view[0];
	oTsToView1_Depth.xyz = ts_to_view[1];
	oTexCoord_2xy.zw = ts_to_view[2].xy;
	oTsToView0_2z.w = ts_to_view[2].z;

	oTsToView1_Depth.w = oPos.w;
	
	oScreenTc.xy = oPos.xy / oPos.w * 0.5f;
	oScreenTc.y *= KLAYGE_FLIPPING;
	oScreenTc.xy += 0.5f;
	
#ifndef NOPERSPECTIVE_SUPPORT
	oScreenTc.z = oPos.w;
	oScreenTc.xy *= oScreenTc.z;
#endif
}

float4 DepthPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2) : SV_Target
{
	return WriteAFloat(ts_to_view1_depth.w, far_plane.y);
}

float4 DepthAlphaTestPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);
	return WriteAFloat(ts_to_view1_depth.w, far_plane.y);
}

float4 DepthAlphaBlendPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3
#else
					float3 screen_tc_w : TEXCOORD3
#endif
		) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	clip(ReadAFloat(opaque_depth_tex.Sample(point_sampler, screen_tc), far_plane.x) - ts_to_view1_depth.w);	
	return WriteAFloat(ts_to_view1_depth.w, far_plane.y);
}

float2 ParallaxMappingCorrection(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float2 uv = texcoord_2xy.xy;
	if (height_map_enabled)
	{
		float3 view = normalize(float3(ts_to_view0_2z.z, ts_to_view1.z, ts_to_view0_2z.w));

		float height = (height_tex.Sample(trilinear_sampler, uv).r - 0.5f) * height_scale;
		uv += view.xy * height;
	}
	return uv;
}

float3 RestoreNormal(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float3 normal = normalize(float3(texcoord_2xy.zw, ts_to_view0_2z.w));
	if (normal_map_enabled)
	{
		float3x3 ts_to_view;
		ts_to_view[0] = normalize(ts_to_view0_2z.xyz);
		ts_to_view[1] = normalize(ts_to_view1);
		ts_to_view[2] = normal;
		normal = normalize(mul(decompress_normal(normal_tex.Sample(trilinear_sampler, texcoord_2xy.xy)), ts_to_view));
	}
	
	return normal;
}

float4 ConstructGBufferRT0(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float3 normal = RestoreNormal(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	float shininess;
	if (shininess_clr.y > 0.5f)
	{
		shininess = shininess_tex.Sample(aniso_sampler, texcoord_2xy.xy).r;
	}
	else
	{
		shininess = shininess_clr.r;
	}
	return StoreGBufferRT0(normal, shininess);
}

float4 ConstructGBufferRT1(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float3 diffuse;
	if (diffuse_clr.w > 0.5f)
	{
		diffuse = diffuse_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		diffuse = diffuse_clr.rgb;
	}
	
	float3 specular;
	if (specular_clr.w > 0.5f)
	{
		specular = specular_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		specular = specular_clr.rgb;
	}

	return StoreGBufferRT1(diffuse, specular);
}

void ConstructMRTGBuffer(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1,
					out float4 mrt_0, out float4 mrt_1)
{
	float3 normal = RestoreNormal(texcoord_2xy, ts_to_view0_2z, ts_to_view1);

	float3 diffuse;
	if (diffuse_clr.w > 0.5f)
	{
		diffuse = diffuse_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		diffuse = diffuse_clr.rgb;
	}
	
	float3 specular;
	if (specular_clr.w > 0.5f)
	{
		specular = specular_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		specular = specular_clr.rgb;
	}
	
	float shininess;
	if (shininess_clr.y > 0.5f)
	{
		shininess = shininess_tex.Sample(aniso_sampler, texcoord_2xy.xy).r;
	}
	else
	{
		shininess = shininess_clr.r;
	}
	
	StoreGBufferMRT(normal, specular, shininess, diffuse,
		mrt_0, mrt_1);
}

float4 GBufferRT0PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2) : SV_Target
{
	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	return ConstructGBufferRT0(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
}

float4 GBufferAlphaTestRT0PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2) : SV_Target
{
	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	clip(diffuse_tex.Sample(bilinear_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);
	return ConstructGBufferRT0(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
}

float4 GBufferAlphaBlendRT0PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3
#else
					float3 screen_tc_w : TEXCOORD3
#endif
			) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz);
	clip(ReadAFloat(opaque_depth_tex.Sample(point_sampler, screen_tc), far_plane.x) - ts_to_view1_depth.w);	
	return ConstructGBufferRT0(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz);
}

float4 GBufferRT1PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2) : SV_Target
{
	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	return ConstructGBufferRT1(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
}

float4 GBufferAlphaTestRT1PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2) : SV_Target
{
	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	clip(diffuse_tex.Sample(bilinear_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);
	return ConstructGBufferRT1(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
}

float4 GBufferAlphaBlendRT1PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3
#else
					float3 screen_tc_w : TEXCOORD3
#endif
			) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz);
	clip(ReadAFloat(opaque_depth_tex.Sample(point_sampler, screen_tc), far_plane.x) - ts_to_view1_depth.w);	
	return ConstructGBufferRT1(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz);
}

void GBufferMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	ConstructMRTGBuffer(texcoord_2xy, ts_to_view0_2z, ts_to_view1, mrt_0, mrt_1);
}

void GBufferAlphaTestMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	clip(diffuse_tex.Sample(bilinear_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);
	ConstructMRTGBuffer(texcoord_2xy, ts_to_view0_2z, ts_to_view1, mrt_0, mrt_1);
}

void GBufferAlphaBlendMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3,
#else
					float3 screen_tc_w : TEXCOORD3,
#endif
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz);
	clip(ReadAFloat(opaque_depth_tex.Sample(point_sampler, screen_tc), far_plane.x) - ts_to_view1_depth.w);
	ConstructMRTGBuffer(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz, mrt_0, mrt_1);
}
		]]>
	</shader>

	<technique name="DepthTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="DepthPS()"/>
		</pass>
	</technique>
	<technique name="DepthAlphaTestTech" inherit="DepthTech">
		<pass name="p0">
			<state name="pixel_shader" value="DepthAlphaTestPS()"/>
		</pass>
	</technique>
	<technique name="DepthAlphaBlendBackTech">
		<pass name="p0">
			<state name="depth_func" value="greater"/>

			<state name="cull_mode" value="front"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="DepthAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="DepthAlphaBlendFrontTech" inherit="DepthAlphaBlendBackTech">
		<pass name="p0">
			<state name="depth_func" value="less"/>

			<state name="cull_mode" value="back"/>
		</pass>
	</technique>
	<technique name="SSSDepthTech" inherit="DepthTech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_write_mask" value="32"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="32"/>
			<state name="back_stencil_pass" value="replace"/>
			<state name="back_stencil_write_mask" value="32"/>
		</pass>
	</technique>
	<technique name="SSSDepthAlphaTestTech" inherit="SSSDepthTech">
		<pass name="p0">
			<state name="pixel_shader" value="DepthAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="GBufferRT0Tech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferRT0PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaTestRT0Tech" inherit="GBufferRT0Tech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestRT0PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendBackRT0Tech">
		<pass name="p0">
			<state name="depth_func" value="greater"/>
			
			<state name="cull_mode" value="front"/>
			
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="0"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="0"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferAlphaBlendRT0PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontRT0Tech" inherit="GBufferAlphaBlendBackRT0Tech">
		<pass name="p0">
			<state name="depth_func" value="less"/>
			
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>
	<technique name="SSSGBufferRT0Tech" inherit="GBufferRT0Tech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_write_mask" value="32"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="32"/>
			<state name="back_stencil_pass" value="replace"/>
			<state name="back_stencil_write_mask" value="32"/>
		</pass>
	</technique>
	<technique name="SSSGBufferAlphaTestRT0Tech" inherit="SSSGBufferRT0Tech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestRT0PS()"/>
		</pass>
	</technique>

	<technique name="GBufferRT1Tech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_func" value="equal"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferRT1PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaTestRT1Tech" inherit="GBufferRT1Tech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestRT1PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendBackRT1Tech">
		<pass name="p0">
			<state name="depth_func" value="equal"/>

			<state name="cull_mode" value="front"/>
			
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="not_equal"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="keep"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="not_equal"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="keep"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferAlphaBlendRT1PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontRT1Tech" inherit="GBufferAlphaBlendBackRT1Tech">
		<pass name="p0">
			<state name="depth_func" value="equal"/>

			<state name="cull_mode" value="back"/>
		</pass>
	</technique>
	<technique name="SSSGBufferRT1Tech" inherit="GBufferRT1Tech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_write_mask" value="32"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="32"/>
			<state name="back_stencil_pass" value="replace"/>
			<state name="back_stencil_write_mask" value="32"/>
		</pass>
	</technique>
	<technique name="SSSGBufferAlphaTestRT1Tech" inherit="SSSGBufferRT1Tech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestRT1PS()"/>
		</pass>
	</technique>

	<technique name="GBufferMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferMRTPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaTestMRTTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestMRTPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="depth_func" value="greater"/>
			
			<state name="cull_mode" value="front"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="0"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="0"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferAlphaBlendMRTPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontMRTTech" inherit="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="depth_func" value="less"/>
			
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>
	<technique name="SSSGBufferMRTTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_write_mask" value="32"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="32"/>
			<state name="back_stencil_pass" value="replace"/>
			<state name="back_stencil_write_mask" value="32"/>
		</pass>
	</technique>
	<technique name="SSSGBufferAlphaTestMRTTech" inherit="SSSGBufferMRTTech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestMRTPS()"/>
		</pass>
	</technique>

	<technique name="GenReflectiveShadowMapTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="GenReflectiveShadowMapAlphaTestTech" inherit="GBufferAlphaTestMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void GenShadowMapVS(float4 pos : POSITION,
						float2 texcoord : TEXCOORD0,
						float4 tangent_quat : TANGENT,
#if SKINNING_ON
						float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
						float4 blend_indices_f : BLENDINDICES,
#else
						uint4 blend_indices : BLENDINDICES,
#endif
#endif
						out float2 oTc : TEXCOORD0,
						out float4 oPos : SV_Position)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	float3 result_pos;
	float4 result_tangent_quat;
	CalcMesh(pos, texcoord, tangent_quat,
#if SKINNING_ON
				blend_weights, blend_indices,
#endif
				oTc, result_pos,
				result_tangent_quat);

#if TRANSPARENCY_ON
	float3 normal = transform_quat(float3(0, 0, 1), result_tangent_quat);
	result_pos.xyz += normal * 0.005f;
#endif

	oPos = mul(float4(result_pos, 1), mvp);
}

float4 GenShadowMapPS() : SV_Target
{
	return 0;
}

float4 GenShadowMapAlphaTestPS(float2 tc : TEXCOORD0) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, tc).a - ALPHA_TEST_THRESHOLD);
	return 0;
}

void GenShadowMapWODepthTextureVS(float4 pos : POSITION,
						float2 texcoord : TEXCOORD0,
						float4 tangent_quat : TANGENT,
#if SKINNING_ON
						float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
						float4 blend_indices_f : BLENDINDICES,
#else
						uint4 blend_indices : BLENDINDICES,
#endif
#endif
						out float2 oTc : TEXCOORD0,
						out float3 oViewDir : TEXCOORD1,
						out float4 oPos : SV_Position)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	float3 result_pos;
	float4 result_tangent_quat;
	CalcMesh(pos, texcoord, tangent_quat,
#if SKINNING_ON
				blend_weights, blend_indices,
#endif
				oTc, result_pos,
				result_tangent_quat);

#if TRANSPARENCY_ON
	float3 normal = transform_quat(float3(0, 0, 1), result_tangent_quat);
	result_pos.xyz += normal * 0.005f;
#endif

	oPos = mul(float4(result_pos, 1), mvp);
	oViewDir = mul(float4(result_pos, 1), model_view).xyz;
}

float4 GenShadowMapWODepthTexturePS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	return WriteAFloat(length(view_dir), far_plane.y);
}

float4 GenShadowMapWODepthTextureAlphaTestPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, tc).a - ALPHA_TEST_THRESHOLD);	
	return WriteAFloat(length(view_dir), far_plane.y);
}

void GenCascadedShadowMapVS(float4 pos : POSITION,
						float2 texcoord : TEXCOORD0,
						float4 tangent_quat : TANGENT,
#if SKINNING_ON
						float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
						float4 blend_indices_f : BLENDINDICES,
#else
						uint4 blend_indices : BLENDINDICES,
#endif
#endif
						out float2 oTc : TEXCOORD0,
						out float oDepth : TEXCOORD1,
						out float4 oPos : SV_Position)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	float3 result_pos;
	float4 result_tangent_quat;
	CalcMesh(pos, texcoord, tangent_quat,
#if SKINNING_ON
				blend_weights, blend_indices,
#endif
				oTc, result_pos,
				result_tangent_quat);
	
	oPos = mul(float4(result_pos, 1), mvp);
	oDepth = mul(float4(result_pos, 1), model_view).z;
}

float4 GenCascadedShadowMapPS(float2 tc : TEXCOORD0, float depth : TEXCOORD1) : SV_Target
{
	return WriteAFloat(depth, far_plane.y);
}

float4 GenCascadedShadowMapAlphaTestPS(float2 tc : TEXCOORD0, float depth : TEXCOORD1) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, tc).a - ALPHA_TEST_THRESHOLD);
	return WriteAFloat(depth, far_plane.y);
}
		]]>
	</shader>

	<technique name="GenShadowMapTech">
		<pass name="p0">			
			<state name="cull_mode" value="none"/>
			<state name="color_write_mask" value="0"/>
			
			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>
	<technique name="GenShadowMapAlphaTestTech" inherit="GenShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="SSSGenShadowMapTech" inherit="GenShadowMapTech">
		<macro name="TRANSPARENCY_ON" value="1"/>
	</technique>
	<technique name="SSSGenShadowMapAlphaTestTech" inherit="SSSGenShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapAlphaTestPS()"/>
		</pass>
	</technique>
	
	<technique name="GenShadowMapWODepthTextureTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="GenShadowMapWODepthTextureVS()"/>
			<state name="pixel_shader" value="GenShadowMapWODepthTexturePS()"/>
		</pass>
	</technique>
	<technique name="GenShadowMapWODepthTextureAlphaTestTech" inherit="GenShadowMapWODepthTextureTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapWODepthTextureAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="SSSGenShadowMapWODepthTextureTech" inherit="GenShadowMapWODepthTextureTech">
		<macro name="TRANSPARENCY_ON" value="1"/>
	</technique>
	<technique name="SSSGenShadowMapWODepthTextureAlphaTestTech" inherit="SSSGenShadowMapWODepthTextureTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapWODepthTextureAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="GenCascadedShadowMapTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_clip_enable" value="false"/>

			<state name="vertex_shader" value="GenCascadedShadowMapVS()"/>
			<state name="pixel_shader" value="GenCascadedShadowMapPS()"/>
		</pass>
	</technique>
	<technique name="GenCascadedShadowMapAlphaTestTech" inherit="GenCascadedShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenCascadedShadowMapAlphaTestPS()"/>
		</pass>
	</technique>


	<shader>
		<![CDATA[
float4 SpecialShadingPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float3 emit;
	if (emit_clr.w > 0.5f)
	{
		emit = emit_tex.Sample(aniso_sampler, texcoord).rgb * 16;
	}
	else
	{
		emit = emit_clr.rgb;
	}
	return float4(max(emit, 0), 1);
}

float4 SpecialShadingAlphaBlendPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float3 emit;
	if (emit_clr.w > 0.5f)
	{
		emit = emit_tex.Sample(aniso_sampler, texcoord).rgb * 16;
	}
	else
	{
		emit = emit_clr.rgb;
	}
	float opacity;
	if (opacity_map_enabled)
	{
		opacity = diffuse_tex.Sample(aniso_sampler, texcoord).a;
	}
	else
	{
		opacity = opacity_clr;
	}
	return float4(max(emit, 0), opacity);
}
		]]>
	</shader>

	<technique name="SpecialShadingTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_enable" value="true"/>
			<state name="depth_func" value="equal"/>
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="src_alpha"/>
			<state name="dest_blend_alpha" value="zero"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="SpecialShadingPS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendBackTech" inherit="SpecialShadingTech">
		<pass name="p0">
			<state name="cull_mode" value="front"/>

			<state name="pixel_shader" value="SpecialShadingAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendFrontTech" inherit="SpecialShadingAlphaBlendBackTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>


	<shader>
		<![CDATA[
float4 SelectModePS() : SV_Target
{
	return object_id;
}
		]]>
	</shader>

	<technique name="SelectModeTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="SelectModePS()"/>
		</pass>
	</technique>
</effect>

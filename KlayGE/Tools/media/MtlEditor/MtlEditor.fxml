<?xml version='1.0'?>

<effect>
	<include name="GBuffer.fxml"/>

	<cbuffer name="less_freq">
		<parameter type="int" name="vertex_usage"/>
		<parameter type="int" name="vertex_usage_index"/>
		<parameter type="int" name="texture_slot"/>
	</cbuffer>

	<macro name="VEU_Position" value="0"/>
	<macro name="VEU_Normal" value="1"/>
	<macro name="VEU_Diffuse" value="2"/>
	<macro name="VEU_Specular" value="3"/>
	<macro name="VEU_BlendWeight" value="4"/>
	<macro name="VEU_BlendIndex" value="5"/>
	<macro name="VEU_TextureCoord" value="6"/>
	<macro name="VEU_Tangent" value="7"/>
	<macro name="VEU_Binormal" value="8"/>

	<macro name="TS_Albedo" value="0"/>
	<macro name="TS_Metalness" value="1"/>
	<macro name="TS_Glossiness" value="2"/>
	<macro name="TS_Emissive" value="3"/>
	<macro name="TS_Opacity" value="4"/>
	<macro name="TS_Normal" value="5"/>
	<macro name="TS_Height" value="6"/>

	<shader>
		<![CDATA[
float4 VisualizeVertex(float3 pos, float3 tangent, float3 binormal, float3 normal,
						float4 blend_weights, int4 blend_indices, float2 tex)
{
	float4 oClr;
	if (VEU_Position == vertex_usage)
	{
		oClr = float4(pos, 1);
	}
	else if (VEU_Normal == vertex_usage)
	{
		oClr = float4(normal / 2 + 0.5f, 1);
	}
	else if (VEU_BlendWeight == vertex_usage)
	{
		oClr = blend_weights;
	}
	else if (VEU_BlendIndex == vertex_usage)
	{
		oClr = blend_indices / 255.0f;
	}
	else if (VEU_TextureCoord == vertex_usage)
	{
		oClr = float4(tex, 0, 1);
	}
	else if (VEU_Tangent == vertex_usage)
	{
		oClr = float4(tangent / 2 + 0.5f, 1);
	}
	else// if (VEU_Binormal == vertex_usage)
	{
		oClr = float4(binormal / 2 + 0.5f, 1);
	}

	return oClr;
}

float4 VisualizeTexture(float2 tex0)
{
	float4 ret;
	if (TS_Albedo == texture_slot)
	{
		ret = float4(AlbedoNode(tex0), 0);
	}
	else if (TS_Metalness == texture_slot)
	{
		ret = float4(MetalnessGlossinessNode(tex0).xxx, 0);
	}
	else if (TS_Glossiness == texture_slot)
	{
		ret = float4(MetalnessGlossinessNode(tex0).yyy, 0);
	}
	else if (TS_Emissive == texture_slot)
	{
		ret = float4(EmissiveNode(tex0), 0);
	}
	else if (TS_Opacity == texture_slot)
	{
		ret = float4(OpacityNode(tex0).xxx, 0);
	}
	else if (TS_Normal == texture_slot)
	{
		ret = float4(NormalNode(tex0), 0);
	}
	else //if (TS_Height == texture_slot)
	{
		ret = float4((HeightForParallaxNode(tex0) + HeightForTessellationNode(tex0)).xxx, 0);
	}

	return ret;
}

void VisualizeVertexVS(uint instance_id : SV_InstanceID,
				float4 pos : POSITION,
				float2 texcoord : TEXCOORD0,
				float4 tangent_quat	: TANGENT,	// in object space
#if NUM_JOINTS > 0
				float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
				float4 blend_indices_f : BLENDINDICES,
#else
				uint4 blend_indices : BLENDINDICES,
#endif
#endif
				out float4 oClr : COLOR,
				out float4 oPos : SV_Position)
{
#if NUM_JOINTS > 0
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#else
	float4 blend_weights = 0;
	int4 blend_indices = 0;
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	KlayGECameraInfo camera = CameraFromInstance(instance_id);
	float4x4 mvp = camera.mvp;

	float3 result_pos;
	float4 result_tangent_quat;
	PositionNode(pos.xyz, tangent_quat, blend_weights, blend_indices, result_pos, result_tangent_quat);
	float2 oTex = TexcoordNode(texcoord);

	float3x3 obj_to_ts;
	obj_to_ts[0] = transform_quat(float3(1, 0, 0), result_tangent_quat);
	obj_to_ts[1] = transform_quat(float3(0, 1, 0), result_tangent_quat) * sign(result_tangent_quat.w);
	obj_to_ts[2] = transform_quat(float3(0, 0, 1), result_tangent_quat);

	oPos = mul(float4(result_pos, 1), mvp);
	oClr = VisualizeVertex(result_pos, obj_to_ts[0], obj_to_ts[1], obj_to_ts[2], blend_weights, blend_indices, oTex);
}

void VisualizeVertexPS(float4 clr : COLOR,
				out float4 rt0 : SV_Target0, out float4 rt1 : SV_Target1)
{
	rt0 = 0;
	rt1 = clr;
}

void VisualizeTexturePS(float2 tex0 : TEXCOORD0,
				out float4 rt0 : SV_Target0, out float4 rt1 : SV_Target1)
{
	rt0 = 0;
	rt1 = VisualizeTexture(tex0);
}
		]]>
	</shader>

	<technique name="VisualizeVertexTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="VisualizeVertexVS()"/>
			<state name="pixel_shader" value="VisualizeVertexPS()"/>
		</pass>
	</technique>

	<technique name="VisualizeTextureTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="VisualizeTexturePS()"/>
		</pass>
	</technique>

	<parameter type="texture2D" name="color_map"/>
	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<shader>
		<![CDATA[
void SkeletonVS(uint instance_id : SV_InstanceID,
				float4 pos : POSITION,
#if NUM_JOINTS > 0
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
				float4 blend_indices_f : BLENDINDICES,
#else
				uint4 blend_indices : BLENDINDICES,
#endif
#endif
				out float oColor : COLOR0,
				out float4 oPos : SV_Position)
{
#if NUM_JOINTS > 0
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#else
	int4 blend_indices = 0;
#endif

	float3 result_pos;
	float4 result_tangent_quat;
	PositionNode(pos.xyz, 0, float4(1, 0, 0, 0), blend_indices, result_pos, result_tangent_quat);
	float2 oTex = TexcoordNode(0);

	KlayGECameraInfo camera = CameraFromInstance(instance_id);
	float4x4 mvp = camera.mvp;

	oColor = pos.w;
	oPos = mul(float4(result_pos, 1), mvp);
}

float4 SkeletonPS(float color : COLOR0) : SV_Target
{
	return color_map.SampleLevel(linear_sampler, float2(color, 0.5f), 0);
}
		]]>
	</shader>
	<technique name="SkeletonTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="polygon_mode" value="line"/>
			<state name="depth_enable" value="false"/>

			<state name="vertex_shader" value="SkeletonVS()"/>
			<state name="pixel_shader" value="SkeletonPS()"/>
		</pass>
	</technique>
</effect>

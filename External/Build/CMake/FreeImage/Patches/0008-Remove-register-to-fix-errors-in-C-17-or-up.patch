From 99550fce27e816afa86e6bec727ff0adae0b4318 Mon Sep 17 00:00:00 2001
From: Minmin Gong <gongminmin@msn.com>
Date: Thu, 26 Aug 2021 23:18:06 -0700
Subject: [PATCH 8/8] Remove 'register' to fix errors in C++17 or up

---
 Source/LibRawLite/src/libraw_cxx.cpp | 6 +++---
 Source/OpenEXR/Half/half.cpp         | 6 +++---
 Source/OpenEXR/Half/half.h           | 4 ++--
 Source/OpenEXR/Imath/ImathMatrix.h   | 8 ++++----
 4 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/Source/LibRawLite/src/libraw_cxx.cpp b/Source/LibRawLite/src/libraw_cxx.cpp
index d79d34b..8302784 100644
--- a/Source/LibRawLite/src/libraw_cxx.cpp
+++ b/Source/LibRawLite/src/libraw_cxx.cpp
@@ -3275,7 +3275,7 @@ int LibRaw::phase_one_subtract_black(ushort *src, ushort *dest)
     {
       if (!imgdata.rawdata.ph1_cblack || !imgdata.rawdata.ph1_rblack)
       {
-        register int bl = imgdata.color.phase_one_data.t_black;
+        int bl = imgdata.color.phase_one_data.t_black;
         for (int row = 0; row < S.raw_height; row++)
         {
           checkCancel();
@@ -3289,7 +3289,7 @@ int LibRaw::phase_one_subtract_black(ushort *src, ushort *dest)
       }
       else
       {
-        register int bl = imgdata.color.phase_one_data.t_black;
+        int bl = imgdata.color.phase_one_data.t_black;
         for (int row = 0; row < S.raw_height; row++)
         {
           checkCancel();
@@ -6115,7 +6115,7 @@ static void utf2char(utf16_t *str, char *buffer, unsigned bufsz)
 
 static void *lr_memmem(const void *l, size_t l_len, const void *s, size_t s_len)
 {
-  register char *cur, *last;
+  char *cur, *last;
   const char *cl = (const char *)l;
   const char *cs = (const char *)s;
 
diff --git a/Source/OpenEXR/Half/half.cpp b/Source/OpenEXR/Half/half.cpp
index 609aaa1..09a50aa 100644
--- a/Source/OpenEXR/Half/half.cpp
+++ b/Source/OpenEXR/Half/half.cpp
@@ -94,9 +94,9 @@ half::convert (int i)
     // of float and half (127 versus 15).
     //
 
-    register int s =  (i >> 16) & 0x00008000;
-    register int e = ((i >> 23) & 0x000000ff) - (127 - 15);
-    register int m =   i        & 0x007fffff;
+    int s =  (i >> 16) & 0x00008000;
+    int e = ((i >> 23) & 0x000000ff) - (127 - 15);
+    int m =   i        & 0x007fffff;
 
     //
     // Now reassemble s, e and m into a half:
diff --git a/Source/OpenEXR/Half/half.h b/Source/OpenEXR/Half/half.h
index f78e4f6..da418d6 100644
--- a/Source/OpenEXR/Half/half.h
+++ b/Source/OpenEXR/Half/half.h
@@ -459,7 +459,7 @@ half::half (float f)
 	// to do the float-to-half conversion.
 	//
 
-	register int e = (x.i >> 23) & 0x000001ff;
+	int e = (x.i >> 23) & 0x000001ff;
 
 	e = _eLut[e];
 
@@ -470,7 +470,7 @@ half::half (float f)
 	    // bits and combine it with the sign and exponent.
 	    //
 
-	    register int m = x.i & 0x007fffff;
+	    int m = x.i & 0x007fffff;
 	    _h = e + ((m + 0x00000fff + ((m >> 13) & 1)) >> 13);
 	}
 	else
diff --git a/Source/OpenEXR/Imath/ImathMatrix.h b/Source/OpenEXR/Imath/ImathMatrix.h
index 00fbfbb..c5d7e24 100644
--- a/Source/OpenEXR/Imath/ImathMatrix.h
+++ b/Source/OpenEXR/Imath/ImathMatrix.h
@@ -2519,11 +2519,11 @@ Matrix44<T>::multiply (const Matrix44<T> &a,
                        const Matrix44<T> &b,
                        Matrix44<T> &c)
 {
-    register const T * IMATH_RESTRICT ap = &a.x[0][0];
-    register const T * IMATH_RESTRICT bp = &b.x[0][0];
-    register       T * IMATH_RESTRICT cp = &c.x[0][0];
+    const T * IMATH_RESTRICT ap = &a.x[0][0];
+    const T * IMATH_RESTRICT bp = &b.x[0][0];
+          T * IMATH_RESTRICT cp = &c.x[0][0];
 
-    register T a0, a1, a2, a3;
+    T a0, a1, a2, a3;
 
     a0 = ap[0];
     a1 = ap[1];
-- 
2.17.1.windows.2

